
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002f98  0000302c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000fa  008000fa  000030c6  2**0
                  ALLOC
  3 .stab         00002dcc  00000000  00000000  000030c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a5  00000000  00000000  00005e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007239  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007379  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009132  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000adcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

uint8 g_state = CREATE_PASSWORD;



int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ec 97       	sbiw	r28, 0x3c	; 60
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	UART_init(&Uart_Config_Ptr); //initialize uart
     b5a:	85 ef       	ldi	r24, 0xF5	; 245
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_init>
	LCD_init(); // lcd initialization
     b62:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_init>
	SREG |= (1<<7); // enable interrupts
     b66:	af e5       	ldi	r26, 0x5F	; 95
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ef e5       	ldi	r30, 0x5F	; 95
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24

	while(1)
	{
		switch (g_state){
     b74:	80 91 fc 00 	lds	r24, 0x00FC
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	3c af       	std	Y+60, r19	; 0x3c
     b7e:	2b af       	std	Y+59, r18	; 0x3b
     b80:	8b ad       	ldd	r24, Y+59	; 0x3b
     b82:	9c ad       	ldd	r25, Y+60	; 0x3c
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <main+0x46>
     b8a:	1e c1       	rjmp	.+572    	; 0xdc8 <main+0x282>
     b8c:	2b ad       	ldd	r18, Y+59	; 0x3b
     b8e:	3c ad       	ldd	r19, Y+60	; 0x3c
     b90:	23 30       	cpi	r18, 0x03	; 3
     b92:	31 05       	cpc	r19, r1
     b94:	09 f4       	brne	.+2      	; 0xb98 <main+0x52>
     b96:	a8 c1       	rjmp	.+848    	; 0xee8 <main+0x3a2>
     b98:	8b ad       	ldd	r24, Y+59	; 0x3b
     b9a:	9c ad       	ldd	r25, Y+60	; 0x3c
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	51 f7       	brne	.-44     	; 0xb74 <main+0x2e>
        /*
         * start state for creation a new password or change password
         */
		case CREATE_PASSWORD:
		{
			displayEnterPassword();
     ba0:	0e 94 21 08 	call	0x1042	; 0x1042 <displayEnterPassword>
			getPassword(g_password);
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 8b 08 	call	0x1116	; 0x1116 <getPassword>
			LCD_clearScreen();
     bac:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
			displayRe_EnterPassword();
     bb0:	0e 94 32 08 	call	0x1064	; 0x1064 <displayRe_EnterPassword>
			getPassword(g_re_password);
     bb4:	8a e0       	ldi	r24, 0x0A	; 10
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 8b 08 	call	0x1116	; 0x1116 <getPassword>
			MCSendState(SEND_PASSWORD);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 47 08 	call	0x108e	; 0x108e <MCSendState>
			sendPassword(g_password);
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 47 0a 	call	0x148e	; 0x148e <sendPassword>
			MCSendState(CONFIRM_PASSWORD);
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 47 08 	call	0x108e	; 0x108e <MCSendState>
			sendPassword(g_re_password);
     bd0:	8a e0       	ldi	r24, 0x0A	; 10
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 47 0a 	call	0x148e	; 0x148e <sendPassword>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	aa ef       	ldi	r26, 0xFA	; 250
     bde:	b3 e4       	ldi	r27, 0x43	; 67
     be0:	8d ab       	std	Y+53, r24	; 0x35
     be2:	9e ab       	std	Y+54, r25	; 0x36
     be4:	af ab       	std	Y+55, r26	; 0x37
     be6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be8:	6d a9       	ldd	r22, Y+53	; 0x35
     bea:	7e a9       	ldd	r23, Y+54	; 0x36
     bec:	8f a9       	ldd	r24, Y+55	; 0x37
     bee:	98 ad       	ldd	r25, Y+56	; 0x38
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a ef       	ldi	r20, 0xFA	; 250
     bf6:	54 e4       	ldi	r21, 0x44	; 68
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	89 ab       	std	Y+49, r24	; 0x31
     c02:	9a ab       	std	Y+50, r25	; 0x32
     c04:	ab ab       	std	Y+51, r26	; 0x33
     c06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c08:	69 a9       	ldd	r22, Y+49	; 0x31
     c0a:	7a a9       	ldd	r23, Y+50	; 0x32
     c0c:	8b a9       	ldd	r24, Y+51	; 0x33
     c0e:	9c a9       	ldd	r25, Y+52	; 0x34
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e8       	ldi	r20, 0x80	; 128
     c16:	5f e3       	ldi	r21, 0x3F	; 63
     c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c1c:	88 23       	and	r24, r24
     c1e:	2c f4       	brge	.+10     	; 0xc2a <main+0xe4>
		__ticks = 1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	98 ab       	std	Y+48, r25	; 0x30
     c26:	8f a7       	std	Y+47, r24	; 0x2f
     c28:	3f c0       	rjmp	.+126    	; 0xca8 <main+0x162>
	else if (__tmp > 65535)
     c2a:	69 a9       	ldd	r22, Y+49	; 0x31
     c2c:	7a a9       	ldd	r23, Y+50	; 0x32
     c2e:	8b a9       	ldd	r24, Y+51	; 0x33
     c30:	9c a9       	ldd	r25, Y+52	; 0x34
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	57 e4       	ldi	r21, 0x47	; 71
     c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3e:	18 16       	cp	r1, r24
     c40:	4c f5       	brge	.+82     	; 0xc94 <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c42:	6d a9       	ldd	r22, Y+53	; 0x35
     c44:	7e a9       	ldd	r23, Y+54	; 0x36
     c46:	8f a9       	ldd	r24, Y+55	; 0x37
     c48:	98 ad       	ldd	r25, Y+56	; 0x38
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e2       	ldi	r20, 0x20	; 32
     c50:	51 e4       	ldi	r21, 0x41	; 65
     c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	98 ab       	std	Y+48, r25	; 0x30
     c68:	8f a7       	std	Y+47, r24	; 0x2f
     c6a:	0f c0       	rjmp	.+30     	; 0xc8a <main+0x144>
     c6c:	88 ec       	ldi	r24, 0xC8	; 200
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9e a7       	std	Y+46, r25	; 0x2e
     c72:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c74:	8d a5       	ldd	r24, Y+45	; 0x2d
     c76:	9e a5       	ldd	r25, Y+46	; 0x2e
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <main+0x132>
     c7c:	9e a7       	std	Y+46, r25	; 0x2e
     c7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c80:	8f a5       	ldd	r24, Y+47	; 0x2f
     c82:	98 a9       	ldd	r25, Y+48	; 0x30
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	98 ab       	std	Y+48, r25	; 0x30
     c88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c8c:	98 a9       	ldd	r25, Y+48	; 0x30
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	69 f7       	brne	.-38     	; 0xc6c <main+0x126>
     c92:	14 c0       	rjmp	.+40     	; 0xcbc <main+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c94:	69 a9       	ldd	r22, Y+49	; 0x31
     c96:	7a a9       	ldd	r23, Y+50	; 0x32
     c98:	8b a9       	ldd	r24, Y+51	; 0x33
     c9a:	9c a9       	ldd	r25, Y+52	; 0x34
     c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	98 ab       	std	Y+48, r25	; 0x30
     ca6:	8f a7       	std	Y+47, r24	; 0x2f
     ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
     caa:	98 a9       	ldd	r25, Y+48	; 0x30
     cac:	9c a7       	std	Y+44, r25	; 0x2c
     cae:	8b a7       	std	Y+43, r24	; 0x2b
     cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
     cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <main+0x16e>
     cb8:	9c a7       	std	Y+44, r25	; 0x2c
     cba:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(500);
			uint8 s = MCReceiveState();
     cbc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <MCReceiveState>
     cc0:	8a af       	std	Y+58, r24	; 0x3a
			if(s==MATCHED ){
     cc2:	8a ad       	ldd	r24, Y+58	; 0x3a
     cc4:	85 30       	cpi	r24, 0x05	; 5
     cc6:	09 f0       	breq	.+2      	; 0xcca <main+0x184>
     cc8:	7c c0       	rjmp	.+248    	; 0xdc2 <main+0x27c>
				LCD_clearScreen();
     cca:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
				LCD_displayString("Matched");
     cce:	80 e6       	ldi	r24, 0x60	; 96
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a8 e4       	ldi	r26, 0x48	; 72
     cdc:	b3 e4       	ldi	r27, 0x43	; 67
     cde:	8f a3       	std	Y+39, r24	; 0x27
     ce0:	98 a7       	std	Y+40, r25	; 0x28
     ce2:	a9 a7       	std	Y+41, r26	; 0x29
     ce4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce6:	6f a1       	ldd	r22, Y+39	; 0x27
     ce8:	78 a5       	ldd	r23, Y+40	; 0x28
     cea:	89 a5       	ldd	r24, Y+41	; 0x29
     cec:	9a a5       	ldd	r25, Y+42	; 0x2a
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4a ef       	ldi	r20, 0xFA	; 250
     cf4:	54 e4       	ldi	r21, 0x44	; 68
     cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	8b a3       	std	Y+35, r24	; 0x23
     d00:	9c a3       	std	Y+36, r25	; 0x24
     d02:	ad a3       	std	Y+37, r26	; 0x25
     d04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d06:	6b a1       	ldd	r22, Y+35	; 0x23
     d08:	7c a1       	ldd	r23, Y+36	; 0x24
     d0a:	8d a1       	ldd	r24, Y+37	; 0x25
     d0c:	9e a1       	ldd	r25, Y+38	; 0x26
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e8       	ldi	r20, 0x80	; 128
     d14:	5f e3       	ldi	r21, 0x3F	; 63
     d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	2c f4       	brge	.+10     	; 0xd28 <main+0x1e2>
		__ticks = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	9a a3       	std	Y+34, r25	; 0x22
     d24:	89 a3       	std	Y+33, r24	; 0x21
     d26:	3f c0       	rjmp	.+126    	; 0xda6 <main+0x260>
	else if (__tmp > 65535)
     d28:	6b a1       	ldd	r22, Y+35	; 0x23
     d2a:	7c a1       	ldd	r23, Y+36	; 0x24
     d2c:	8d a1       	ldd	r24, Y+37	; 0x25
     d2e:	9e a1       	ldd	r25, Y+38	; 0x26
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	4f e7       	ldi	r20, 0x7F	; 127
     d36:	57 e4       	ldi	r21, 0x47	; 71
     d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3c:	18 16       	cp	r1, r24
     d3e:	4c f5       	brge	.+82     	; 0xd92 <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d40:	6f a1       	ldd	r22, Y+39	; 0x27
     d42:	78 a5       	ldd	r23, Y+40	; 0x28
     d44:	89 a5       	ldd	r24, Y+41	; 0x29
     d46:	9a a5       	ldd	r25, Y+42	; 0x2a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	bc 01       	movw	r22, r24
     d5a:	cd 01       	movw	r24, r26
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	9a a3       	std	Y+34, r25	; 0x22
     d66:	89 a3       	std	Y+33, r24	; 0x21
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <main+0x242>
     d6a:	88 ec       	ldi	r24, 0xC8	; 200
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	98 a3       	std	Y+32, r25	; 0x20
     d70:	8f 8f       	std	Y+31, r24	; 0x1f
     d72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d74:	98 a1       	ldd	r25, Y+32	; 0x20
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <main+0x230>
     d7a:	98 a3       	std	Y+32, r25	; 0x20
     d7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	89 a1       	ldd	r24, Y+33	; 0x21
     d80:	9a a1       	ldd	r25, Y+34	; 0x22
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	9a a3       	std	Y+34, r25	; 0x22
     d86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d88:	89 a1       	ldd	r24, Y+33	; 0x21
     d8a:	9a a1       	ldd	r25, Y+34	; 0x22
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f7       	brne	.-38     	; 0xd6a <main+0x224>
     d90:	14 c0       	rjmp	.+40     	; 0xdba <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d92:	6b a1       	ldd	r22, Y+35	; 0x23
     d94:	7c a1       	ldd	r23, Y+36	; 0x24
     d96:	8d a1       	ldd	r24, Y+37	; 0x25
     d98:	9e a1       	ldd	r25, Y+38	; 0x26
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9a a3       	std	Y+34, r25	; 0x22
     da4:	89 a3       	std	Y+33, r24	; 0x21
     da6:	89 a1       	ldd	r24, Y+33	; 0x21
     da8:	9a a1       	ldd	r25, Y+34	; 0x22
     daa:	9e 8f       	std	Y+30, r25	; 0x1e
     dac:	8d 8f       	std	Y+29, r24	; 0x1d
     dae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <main+0x26c>
     db6:	9e 8f       	std	Y+30, r25	; 0x1e
     db8:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);
				g_state = MAIN_MENU;
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	80 93 fc 00 	sts	0x00FC, r24
     dc0:	d9 ce       	rjmp	.-590    	; 0xb74 <main+0x2e>
			}
			else g_state=CREATE_PASSWORD;
     dc2:	10 92 fc 00 	sts	0x00FC, r1
     dc6:	d6 ce       	rjmp	.-596    	; 0xb74 <main+0x2e>
      /*
       * case for mainMenu options either open door or change pass
       */
		case MAIN_MENU:{

			g_getkey=0;
     dc8:	10 92 09 01 	sts	0x0109, r1
			displayMainMenu();
     dcc:	0e 94 5f 08 	call	0x10be	; 0x10be <displayMainMenu>
			g_getkey=KEYPAD_getPressedKey();
     dd0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <KEYPAD_getPressedKey>
     dd4:	80 93 09 01 	sts	0x0109, r24
			LCD_clearScreen();
     dd8:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
			LCD_displayCharacter(g_getkey);
     ddc:	80 91 09 01 	lds	r24, 0x0109
     de0:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayCharacter>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	aa ef       	ldi	r26, 0xFA	; 250
     dea:	b3 e4       	ldi	r27, 0x43	; 67
     dec:	89 8f       	std	Y+25, r24	; 0x19
     dee:	9a 8f       	std	Y+26, r25	; 0x1a
     df0:	ab 8f       	std	Y+27, r26	; 0x1b
     df2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df4:	69 8d       	ldd	r22, Y+25	; 0x19
     df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	4a ef       	ldi	r20, 0xFA	; 250
     e02:	54 e4       	ldi	r21, 0x44	; 68
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	8d 8b       	std	Y+21, r24	; 0x15
     e0e:	9e 8b       	std	Y+22, r25	; 0x16
     e10:	af 8b       	std	Y+23, r26	; 0x17
     e12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e14:	6d 89       	ldd	r22, Y+21	; 0x15
     e16:	7e 89       	ldd	r23, Y+22	; 0x16
     e18:	8f 89       	ldd	r24, Y+23	; 0x17
     e1a:	98 8d       	ldd	r25, Y+24	; 0x18
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e28:	88 23       	and	r24, r24
     e2a:	2c f4       	brge	.+10     	; 0xe36 <main+0x2f0>
		__ticks = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9c 8b       	std	Y+20, r25	; 0x14
     e32:	8b 8b       	std	Y+19, r24	; 0x13
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <main+0x36e>
	else if (__tmp > 65535)
     e36:	6d 89       	ldd	r22, Y+21	; 0x15
     e38:	7e 89       	ldd	r23, Y+22	; 0x16
     e3a:	8f 89       	ldd	r24, Y+23	; 0x17
     e3c:	98 8d       	ldd	r25, Y+24	; 0x18
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	4c f5       	brge	.+82     	; 0xea0 <main+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4e:	69 8d       	ldd	r22, Y+25	; 0x19
     e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9c 8b       	std	Y+20, r25	; 0x14
     e74:	8b 8b       	std	Y+19, r24	; 0x13
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <main+0x350>
     e78:	88 ec       	ldi	r24, 0xC8	; 200
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9a 8b       	std	Y+18, r25	; 0x12
     e7e:	89 8b       	std	Y+17, r24	; 0x11
     e80:	89 89       	ldd	r24, Y+17	; 0x11
     e82:	9a 89       	ldd	r25, Y+18	; 0x12
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <main+0x33e>
     e88:	9a 8b       	std	Y+18, r25	; 0x12
     e8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8c:	8b 89       	ldd	r24, Y+19	; 0x13
     e8e:	9c 89       	ldd	r25, Y+20	; 0x14
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	9c 8b       	std	Y+20, r25	; 0x14
     e94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	8b 89       	ldd	r24, Y+19	; 0x13
     e98:	9c 89       	ldd	r25, Y+20	; 0x14
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	69 f7       	brne	.-38     	; 0xe78 <main+0x332>
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <main+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea0:	6d 89       	ldd	r22, Y+21	; 0x15
     ea2:	7e 89       	ldd	r23, Y+22	; 0x16
     ea4:	8f 89       	ldd	r24, Y+23	; 0x17
     ea6:	98 8d       	ldd	r25, Y+24	; 0x18
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9c 8b       	std	Y+20, r25	; 0x14
     eb2:	8b 8b       	std	Y+19, r24	; 0x13
     eb4:	8b 89       	ldd	r24, Y+19	; 0x13
     eb6:	9c 89       	ldd	r25, Y+20	; 0x14
     eb8:	98 8b       	std	Y+16, r25	; 0x10
     eba:	8f 87       	std	Y+15, r24	; 0x0f
     ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ebe:	98 89       	ldd	r25, Y+16	; 0x10
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <main+0x37a>
     ec4:	98 8b       	std	Y+16, r25	; 0x10
     ec6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			if(g_getkey ==  '-' ||  g_getkey == '+')
     ec8:	80 91 09 01 	lds	r24, 0x0109
     ecc:	8d 32       	cpi	r24, 0x2D	; 45
     ece:	21 f0       	breq	.+8      	; 0xed8 <main+0x392>
     ed0:	80 91 09 01 	lds	r24, 0x0109
     ed4:	8b 32       	cpi	r24, 0x2B	; 43
     ed6:	21 f4       	brne	.+8      	; 0xee0 <main+0x39a>
			{
				g_state=ENTER_PASSWORD;
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	80 93 fc 00 	sts	0x00FC, r24
     ede:	4a ce       	rjmp	.-876    	; 0xb74 <main+0x2e>
			}
			else g_state=MAIN_MENU;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	80 93 fc 00 	sts	0x00FC, r24
     ee6:	46 ce       	rjmp	.-884    	; 0xb74 <main+0x2e>
		break;
      /*
       * state for the user to enter the password and confirm it
       */
		case ENTER_PASSWORD:{
			displayEnterPassword();
     ee8:	0e 94 21 08 	call	0x1042	; 0x1042 <displayEnterPassword>
			getPassword(g_password);
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 8b 08 	call	0x1116	; 0x1116 <getPassword>
			MCSendState(CONFIRM_PASSWORD);
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	0e 94 47 08 	call	0x108e	; 0x108e <MCSendState>
			sendPassword(g_password);
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 47 0a 	call	0x148e	; 0x148e <sendPassword>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	aa ef       	ldi	r26, 0xFA	; 250
     f08:	b3 e4       	ldi	r27, 0x43	; 67
     f0a:	8b 87       	std	Y+11, r24	; 0x0b
     f0c:	9c 87       	std	Y+12, r25	; 0x0c
     f0e:	ad 87       	std	Y+13, r26	; 0x0d
     f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	4a ef       	ldi	r20, 0xFA	; 250
     f20:	54 e4       	ldi	r21, 0x44	; 68
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	8f 83       	std	Y+7, r24	; 0x07
     f2c:	98 87       	std	Y+8, r25	; 0x08
     f2e:	a9 87       	std	Y+9, r26	; 0x09
     f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e8       	ldi	r20, 0x80	; 128
     f40:	5f e3       	ldi	r21, 0x3F	; 63
     f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f46:	88 23       	and	r24, r24
     f48:	2c f4       	brge	.+10     	; 0xf54 <main+0x40e>
		__ticks = 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	3f c0       	rjmp	.+126    	; 0xfd2 <main+0x48c>
	else if (__tmp > 65535)
     f54:	6f 81       	ldd	r22, Y+7	; 0x07
     f56:	78 85       	ldd	r23, Y+8	; 0x08
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	3f ef       	ldi	r19, 0xFF	; 255
     f60:	4f e7       	ldi	r20, 0x7F	; 127
     f62:	57 e4       	ldi	r21, 0x47	; 71
     f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f68:	18 16       	cp	r1, r24
     f6a:	4c f5       	brge	.+82     	; 0xfbe <main+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <main+0x46e>
     f96:	88 ec       	ldi	r24, 0xC8	; 200
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <main+0x45c>
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	69 f7       	brne	.-38     	; 0xf96 <main+0x450>
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <main+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	78 85       	ldd	r23, Y+8	; 0x08
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <main+0x498>
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			uint8 state= MCReceiveState();
     fe6:	0e 94 74 08 	call	0x10e8	; 0x10e8 <MCReceiveState>
     fea:	89 af       	std	Y+57, r24	; 0x39
			if(state == MATCHED){
     fec:	89 ad       	ldd	r24, Y+57	; 0x39
     fee:	85 30       	cpi	r24, 0x05	; 5
     ff0:	69 f4       	brne	.+26     	; 0x100c <main+0x4c6>

				if(g_getkey =='+')
     ff2:	80 91 09 01 	lds	r24, 0x0109
     ff6:	8b 32       	cpi	r24, 0x2B	; 43
     ff8:	31 f4       	brne	.+12     	; 0x1006 <main+0x4c0>
				{
					openDoor();
     ffa:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <openDoor>
					g_state=MAIN_MENU;
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	80 93 fc 00 	sts	0x00FC, r24
    1004:	b7 cd       	rjmp	.-1170   	; 0xb74 <main+0x2e>
				}
				else
					g_state=CREATE_PASSWORD;
    1006:	10 92 fc 00 	sts	0x00FC, r1
    100a:	b4 cd       	rjmp	.-1176   	; 0xb74 <main+0x2e>
			}
			else if(state == NOT_MATCHED)
    100c:	89 ad       	ldd	r24, Y+57	; 0x39
    100e:	86 30       	cpi	r24, 0x06	; 6
    1010:	09 f0       	breq	.+2      	; 0x1014 <main+0x4ce>
    1012:	b0 cd       	rjmp	.-1184   	; 0xb74 <main+0x2e>
			{
				displayNotMatched();
    1014:	0e 94 bc 09 	call	0x1378	; 0x1378 <displayNotMatched>
				g_error++;
    1018:	80 91 fb 00 	lds	r24, 0x00FB
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	80 93 fb 00 	sts	0x00FB, r24
				if(g_error==MAX_ERROR) {
    1022:	80 91 fb 00 	lds	r24, 0x00FB
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	41 f4       	brne	.+16     	; 0x103a <main+0x4f4>
					g_error=0;
    102a:	10 92 fb 00 	sts	0x00FB, r1
					maxErrorOcurred();
    102e:	0e 94 a6 09 	call	0x134c	; 0x134c <maxErrorOcurred>
					g_state= MAIN_MENU;
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	80 93 fc 00 	sts	0x00FC, r24
    1038:	9d cd       	rjmp	.-1222   	; 0xb74 <main+0x2e>
				}
				else g_state=ENTER_PASSWORD;
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	80 93 fc 00 	sts	0x00FC, r24
    1040:	99 cd       	rjmp	.-1230   	; 0xb74 <main+0x2e>

00001042 <displayEnterPassword>:
}

/*
 * display on lcd enter password
 */
void displayEnterPassword(){
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    104a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    104e:	88 e6       	ldi	r24, 0x68	; 104
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_moveCursor>
}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <displayRe_EnterPassword>:
/*
 * display on lcd re_enter password
 */
void displayRe_EnterPassword(){
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    106c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("plz re-enter the");
    1070:	88 e7       	ldi	r24, 0x78	; 120
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_moveCursor>
	LCD_displayString("same pass:");
    1080:	89 e8       	ldi	r24, 0x89	; 137
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <MCSendState>:
/*
 * Function to check if the other MC is ready to recieve the bytes from this MC
 */
void MCSendState(uint8 MC_state){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(MC_READY);
    109a:	80 e1       	ldi	r24, 0x10	; 16
    109c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_sendByte>
	while(UART_recieveByte()!= MC_READY);
    10a0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_recieveByte>
    10a4:	80 31       	cpi	r24, 0x10	; 16
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <MCSendState+0x12>
	UART_sendByte(MC_state);
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_sendByte>
	while(UART_recieveByte()!=DONE);
    10ae:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_recieveByte>
    10b2:	87 30       	cpi	r24, 0x07	; 7
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <MCSendState+0x20>
}
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <displayMainMenu>:

/*
 * function used to display on the lcd the mainmenu options
 */
void displayMainMenu(){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    10c6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString(" + : Open Door");
    10ca:	84 e9       	ldi	r24, 0x94	; 148
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
	LCD_moveCursor(1, 0);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_moveCursor>
	LCD_displayString(" - : Change Pass ");
    10da:	83 ea       	ldi	r24, 0xA3	; 163
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <MCReceiveState>:
/*
 * Function to confirm that the MC is ready to recieve the bytes from other MC
 */
uint8 MCReceiveState(void){
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != MC_READY){};
    10f2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_recieveByte>
    10f6:	80 31       	cpi	r24, 0x10	; 16
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <MCReceiveState+0xa>
	UART_sendByte(MC_READY);
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_sendByte>
	uint8 state=UART_recieveByte();
    1100:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_recieveByte>
    1104:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(DONE);
    1106:	87 e0       	ldi	r24, 0x07	; 7
    1108:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_sendByte>
	return state;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <getPassword>:

/*
 * function to get the password from user from keypad and save to the array
 */
void getPassword(uint8 arr[]){
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	a0 97       	sbiw	r28, 0x20	; 32
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	98 a3       	std	Y+32, r25	; 0x20
    112c:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i=0;
    112e:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 g_key_pressed=KEYPAD_getPressedKey();
    1130:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <KEYPAD_getPressedKey>
    1134:	8d 8f       	std	Y+29, r24	; 0x1d
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a6 e1       	ldi	r26, 0x16	; 22
    113c:	b4 e4       	ldi	r27, 0x44	; 68
    113e:	89 8f       	std	Y+25, r24	; 0x19
    1140:	9a 8f       	std	Y+26, r25	; 0x1a
    1142:	ab 8f       	std	Y+27, r26	; 0x1b
    1144:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	69 8d       	ldd	r22, Y+25	; 0x19
    1148:	7a 8d       	ldd	r23, Y+26	; 0x1a
    114a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    114c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a ef       	ldi	r20, 0xFA	; 250
    1154:	54 e4       	ldi	r21, 0x44	; 68
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8d 8b       	std	Y+21, r24	; 0x15
    1160:	9e 8b       	std	Y+22, r25	; 0x16
    1162:	af 8b       	std	Y+23, r26	; 0x17
    1164:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1166:	6d 89       	ldd	r22, Y+21	; 0x15
    1168:	7e 89       	ldd	r23, Y+22	; 0x16
    116a:	8f 89       	ldd	r24, Y+23	; 0x17
    116c:	98 8d       	ldd	r25, Y+24	; 0x18
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <getPassword+0x72>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9c 8b       	std	Y+20, r25	; 0x14
    1184:	8b 8b       	std	Y+19, r24	; 0x13
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <getPassword+0xf0>
	else if (__tmp > 65535)
    1188:	6d 89       	ldd	r22, Y+21	; 0x15
    118a:	7e 89       	ldd	r23, Y+22	; 0x16
    118c:	8f 89       	ldd	r24, Y+23	; 0x17
    118e:	98 8d       	ldd	r25, Y+24	; 0x18
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <getPassword+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	69 8d       	ldd	r22, Y+25	; 0x19
    11a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9c 8b       	std	Y+20, r25	; 0x14
    11c6:	8b 8b       	std	Y+19, r24	; 0x13
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <getPassword+0xd2>
    11ca:	88 ec       	ldi	r24, 0xC8	; 200
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9a 8b       	std	Y+18, r25	; 0x12
    11d0:	89 8b       	std	Y+17, r24	; 0x11
    11d2:	89 89       	ldd	r24, Y+17	; 0x11
    11d4:	9a 89       	ldd	r25, Y+18	; 0x12
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <getPassword+0xc0>
    11da:	9a 8b       	std	Y+18, r25	; 0x12
    11dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8b 89       	ldd	r24, Y+19	; 0x13
    11e0:	9c 89       	ldd	r25, Y+20	; 0x14
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9c 8b       	std	Y+20, r25	; 0x14
    11e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ea:	9c 89       	ldd	r25, Y+20	; 0x14
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <getPassword+0xb4>
    11f0:	a0 c0       	rjmp	.+320    	; 0x1332 <getPassword+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6d 89       	ldd	r22, Y+21	; 0x15
    11f4:	7e 89       	ldd	r23, Y+22	; 0x16
    11f6:	8f 89       	ldd	r24, Y+23	; 0x17
    11f8:	98 8d       	ldd	r25, Y+24	; 0x18
    11fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9c 8b       	std	Y+20, r25	; 0x14
    1204:	8b 8b       	std	Y+19, r24	; 0x13
    1206:	8b 89       	ldd	r24, Y+19	; 0x13
    1208:	9c 89       	ldd	r25, Y+20	; 0x14
    120a:	98 8b       	std	Y+16, r25	; 0x10
    120c:	8f 87       	std	Y+15, r24	; 0x0f
    120e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1210:	98 89       	ldd	r25, Y+16	; 0x10
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <getPassword+0xfc>
    1216:	98 8b       	std	Y+16, r25	; 0x10
    1218:	8f 87       	std	Y+15, r24	; 0x0f
    121a:	8b c0       	rjmp	.+278    	; 0x1332 <getPassword+0x21c>
	_delay_ms(600);
	while(g_key_pressed!='='){

		if(g_key_pressed>=0&&g_key_pressed<=9){
    121c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121e:	8a 30       	cpi	r24, 0x0A	; 10
    1220:	98 f4       	brcc	.+38     	; 0x1248 <getPassword+0x132>
			if(i<PASSWORD_SIZE){
    1222:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1224:	85 30       	cpi	r24, 0x05	; 5
    1226:	80 f4       	brcc	.+32     	; 0x1248 <getPassword+0x132>
				arr[i]=g_key_pressed;
    1228:	8e 8d       	ldd	r24, Y+30	; 0x1e
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1230:	98 a1       	ldd	r25, Y+32	; 0x20
    1232:	fc 01       	movw	r30, r24
    1234:	e2 0f       	add	r30, r18
    1236:	f3 1f       	adc	r31, r19
    1238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    123a:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    123c:	8a e2       	ldi	r24, 0x2A	; 42
    123e:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayCharacter>
				i++;
    1242:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	8e 8f       	std	Y+30, r24	; 0x1e
			}
		}
		g_key_pressed=KEYPAD_getPressedKey();
    1248:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <KEYPAD_getPressedKey>
    124c:	8d 8f       	std	Y+29, r24	; 0x1d
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a6 e1       	ldi	r26, 0x16	; 22
    1254:	b4 e4       	ldi	r27, 0x44	; 68
    1256:	8b 87       	std	Y+11, r24	; 0x0b
    1258:	9c 87       	std	Y+12, r25	; 0x0c
    125a:	ad 87       	std	Y+13, r26	; 0x0d
    125c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1260:	7c 85       	ldd	r23, Y+12	; 0x0c
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	9e 85       	ldd	r25, Y+14	; 0x0e
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a ef       	ldi	r20, 0xFA	; 250
    126c:	54 e4       	ldi	r21, 0x44	; 68
    126e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	8f 83       	std	Y+7, r24	; 0x07
    1278:	98 87       	std	Y+8, r25	; 0x08
    127a:	a9 87       	std	Y+9, r26	; 0x09
    127c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1292:	88 23       	and	r24, r24
    1294:	2c f4       	brge	.+10     	; 0x12a0 <getPassword+0x18a>
		__ticks = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	3f c0       	rjmp	.+126    	; 0x131e <getPassword+0x208>
	else if (__tmp > 65535)
    12a0:	6f 81       	ldd	r22, Y+7	; 0x07
    12a2:	78 85       	ldd	r23, Y+8	; 0x08
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	4c f5       	brge	.+82     	; 0x130a <getPassword+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    12bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12be:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e2       	ldi	r20, 0x20	; 32
    12c6:	51 e4       	ldi	r21, 0x41	; 65
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <getPassword+0x1ea>
    12e2:	88 ec       	ldi	r24, 0xC8	; 200
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <getPassword+0x1d8>
    12f2:	9c 83       	std	Y+4, r25	; 0x04
    12f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	69 f7       	brne	.-38     	; 0x12e2 <getPassword+0x1cc>
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <getPassword+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <getPassword+0x214>
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
 */
void getPassword(uint8 arr[]){
	uint8 i=0;
	uint8 g_key_pressed=KEYPAD_getPressedKey();
	_delay_ms(600);
	while(g_key_pressed!='='){
    1332:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1334:	8d 33       	cpi	r24, 0x3D	; 61
    1336:	09 f0       	breq	.+2      	; 0x133a <getPassword+0x224>
    1338:	71 cf       	rjmp	.-286    	; 0x121c <getPassword+0x106>
			}
		}
		g_key_pressed=KEYPAD_getPressedKey();
		_delay_ms(600);
	}
}
    133a:	a0 96       	adiw	r28, 0x20	; 32
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <maxErrorOcurred>:

/*
 * Function to display error on lcd for 1 min if number of trials exceed max errors
 */
void maxErrorOcurred(){
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
	MCSendState(BUZZER_ON);
    1354:	83 e0       	ldi	r24, 0x03	; 3
    1356:	0e 94 47 08 	call	0x108e	; 0x108e <MCSendState>
	LCD_clearScreen();
    135a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("ERROR");
    135e:	85 eb       	ldi	r24, 0xB5	; 181
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
	timer1_delay(60);
    1366:	8c e3       	ldi	r24, 0x3C	; 60
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 13 0b 	call	0x1626	; 0x1626 <timer1_delay>
	LCD_clearScreen();
    136e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <displayNotMatched>:

/*
 * display on the screen that the password is incorrect
 */
void displayNotMatched(){
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	2e 97       	sbiw	r28, 0x0e	; 14
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    138c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("wrong pass");
    1390:	8b eb       	ldi	r24, 0xBB	; 187
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	aa e7       	ldi	r26, 0x7A	; 122
    139e:	b4 e4       	ldi	r27, 0x44	; 68
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	ad 87       	std	Y+13, r26	; 0x0d
    13a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a ef       	ldi	r20, 0xFA	; 250
    13b6:	54 e4       	ldi	r21, 0x44	; 68
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	a9 87       	std	Y+9, r26	; 0x09
    13c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <displayNotMatched+0x72>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	3f c0       	rjmp	.+126    	; 0x1468 <displayNotMatched+0xf0>
	else if (__tmp > 65535)
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	4c f5       	brge	.+82     	; 0x1454 <displayNotMatched+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	0f c0       	rjmp	.+30     	; 0x144a <displayNotMatched+0xd2>
    142c:	88 ec       	ldi	r24, 0xC8	; 200
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <displayNotMatched+0xc0>
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <displayNotMatched+0xb4>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <displayNotMatched+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <displayNotMatched+0xfc>
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    147c:	2e 96       	adiw	r28, 0x0e	; 14
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <sendPassword>:

/*
 * function to send the saved password to the another MC using Uart
 */
void sendPassword(uint8 send_pass[5]){
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	62 97       	sbiw	r28, 0x12	; 18
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	9a 8b       	std	Y+18, r25	; 0x12
    14a4:	89 8b       	std	Y+17, r24	; 0x11
	int i=0;
    14a6:	18 8a       	std	Y+16, r1	; 0x10
    14a8:	1f 86       	std	Y+15, r1	; 0x0f
    14aa:	81 c0       	rjmp	.+258    	; 0x15ae <sendPassword+0x120>
	while(i < PASSWORD_SIZE){
		UART_sendByte(send_pass[i]);
    14ac:	2f 85       	ldd	r18, Y+15	; 0x0f
    14ae:	38 89       	ldd	r19, Y+16	; 0x10
    14b0:	89 89       	ldd	r24, Y+17	; 0x11
    14b2:	9a 89       	ldd	r25, Y+18	; 0x12
    14b4:	fc 01       	movw	r30, r24
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	80 81       	ld	r24, Z
    14bc:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_sendByte>
		i++;
    14c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c2:	98 89       	ldd	r25, Y+16	; 0x10
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	98 8b       	std	Y+16, r25	; 0x10
    14c8:	8f 87       	std	Y+15, r24	; 0x0f
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 ea       	ldi	r26, 0xA0	; 160
    14d0:	b1 e4       	ldi	r27, 0x41	; 65
    14d2:	8b 87       	std	Y+11, r24	; 0x0b
    14d4:	9c 87       	std	Y+12, r25	; 0x0c
    14d6:	ad 87       	std	Y+13, r26	; 0x0d
    14d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8f 83       	std	Y+7, r24	; 0x07
    14f4:	98 87       	std	Y+8, r25	; 0x08
    14f6:	a9 87       	std	Y+9, r26	; 0x09
    14f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <sendPassword+0x8e>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	3f c0       	rjmp	.+126    	; 0x159a <sendPassword+0x10c>
	else if (__tmp > 65535)
    151c:	6f 81       	ldd	r22, Y+7	; 0x07
    151e:	78 85       	ldd	r23, Y+8	; 0x08
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <sendPassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	0f c0       	rjmp	.+30     	; 0x157c <sendPassword+0xee>
    155e:	88 ec       	ldi	r24, 0xC8	; 200
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <sendPassword+0xdc>
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <sendPassword+0xd0>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <sendPassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <sendPassword+0x118>
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
/*
 * function to send the saved password to the another MC using Uart
 */
void sendPassword(uint8 send_pass[5]){
	int i=0;
	while(i < PASSWORD_SIZE){
    15ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b0:	98 89       	ldd	r25, Y+16	; 0x10
    15b2:	85 30       	cpi	r24, 0x05	; 5
    15b4:	91 05       	cpc	r25, r1
    15b6:	0c f4       	brge	.+2      	; 0x15ba <sendPassword+0x12c>
    15b8:	79 cf       	rjmp	.-270    	; 0x14ac <sendPassword+0x1e>
		UART_sendByte(send_pass[i]);
		i++;
		_delay_ms(20);

	}
}
    15ba:	62 96       	adiw	r28, 0x12	; 18
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <openDoor>:

/*
 * Function to control the door state with delays (locking , unlocking ,waiting)
 */

void openDoor(){
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62

	MCSendState(OPEN_DOOR);
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	0e 94 47 08 	call	0x108e	; 0x108e <MCSendState>

	LCD_clearScreen();
    15da:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("Door Unlocking");
    15de:	86 ec       	ldi	r24, 0xC6	; 198
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>

	timer1_delay(15);
    15e6:	8f e0       	ldi	r24, 0x0F	; 15
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 13 0b 	call	0x1626	; 0x1626 <timer1_delay>
	LCD_clearScreen();
    15ee:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("waiting");
    15f2:	85 ed       	ldi	r24, 0xD5	; 213
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>

	timer1_delay(3);
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 13 0b 	call	0x1626	; 0x1626 <timer1_delay>
	LCD_clearScreen();
    1602:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	LCD_displayString("Door is locking");
    1606:	8d ed       	ldi	r24, 0xDD	; 221
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>

	timer1_delay(15);
    160e:	8f e0       	ldi	r24, 0x0F	; 15
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 13 0b 	call	0x1626	; 0x1626 <timer1_delay>
	LCD_clearScreen();
    1616:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_clearScreen>
	g_state=MAIN_MENU;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	80 93 fc 00 	sts	0x00FC, r24

}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <timer1_delay>:
/*
 * function to calculate any delay using timer 1
 */

void timer1_delay(int num){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	29 97       	sbiw	r28, 0x09	; 9
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	99 87       	std	Y+9, r25	; 0x09
    163c:	88 87       	std	Y+8, r24	; 0x08
	g_tick=0;
    163e:	10 92 fa 00 	sts	0x00FA, r1
	Timer1_setCallBack(timer_callBack);
    1642:	87 e4       	ldi	r24, 0x47	; 71
    1644:	9b e0       	ldi	r25, 0x0B	; 11
    1646:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <Timer1_setCallBack>
	Timer1_ConfigType  config_ptr;
	config_ptr.initial_value=0;
    164a:	1a 82       	std	Y+2, r1	; 0x02
    164c:	19 82       	std	Y+1, r1	; 0x01
	config_ptr.compare_value=8000;
    164e:	80 e4       	ldi	r24, 0x40	; 64
    1650:	9f e1       	ldi	r25, 0x1F	; 31
    1652:	9c 83       	std	Y+4, r25	; 0x04
    1654:	8b 83       	std	Y+3, r24	; 0x03
	config_ptr.mode=COMPARE_MODE;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	8e 83       	std	Y+6, r24	; 0x06
	config_ptr.prescaler=F_CPU_1024;
    165a:	85 e0       	ldi	r24, 0x05	; 5
    165c:	8d 83       	std	Y+5, r24	; 0x05
	Timer1_init(&config_ptr);
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Timer1_init>
	while(g_tick<num);
    1666:	80 91 fa 00 	lds	r24, 0x00FA
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	88 85       	ldd	r24, Y+8	; 0x08
    1670:	99 85       	ldd	r25, Y+9	; 0x09
    1672:	28 17       	cp	r18, r24
    1674:	39 07       	cpc	r19, r25
    1676:	bc f3       	brlt	.-18     	; 0x1666 <timer1_delay+0x40>
	Timer1_deInit();
    1678:	0e 94 19 16 	call	0x2c32	; 0x2c32 <Timer1_deInit>
}
    167c:	29 96       	adiw	r28, 0x09	; 9
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <timer_callBack>:

/*
 * call back function for the timer 1 calculate g_tick++
 */
void timer_callBack(){
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1696:	80 91 fa 00 	lds	r24, 0x00FA
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	80 93 fa 00 	sts	0x00FA, r24
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <GPIO_setupPinDirection+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <GPIO_setupPinDirection+0x8>
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	6a 83       	std	Y+2, r22	; 0x02
    16b8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	88 30       	cpi	r24, 0x08	; 8
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <GPIO_setupPinDirection+0x1c>
    16c0:	d5 c0       	rjmp	.+426    	; 0x186c <GPIO_setupPinDirection+0x1c6>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	84 30       	cpi	r24, 0x04	; 4
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <GPIO_setupPinDirection+0x24>
    16c8:	d1 c0       	rjmp	.+418    	; 0x186c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3d 83       	std	Y+5, r19	; 0x05
    16d2:	2c 83       	std	Y+4, r18	; 0x04
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <GPIO_setupPinDirection+0x3a>
    16de:	43 c0       	rjmp	.+134    	; 0x1766 <GPIO_setupPinDirection+0xc0>
    16e0:	2c 81       	ldd	r18, Y+4	; 0x04
    16e2:	3d 81       	ldd	r19, Y+5	; 0x05
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <GPIO_setupPinDirection+0x4e>
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	71 f0       	breq	.+28     	; 0x170e <GPIO_setupPinDirection+0x68>
    16f2:	bc c0       	rjmp	.+376    	; 0x186c <GPIO_setupPinDirection+0x1c6>
    16f4:	2c 81       	ldd	r18, Y+4	; 0x04
    16f6:	3d 81       	ldd	r19, Y+5	; 0x05
    16f8:	22 30       	cpi	r18, 0x02	; 2
    16fa:	31 05       	cpc	r19, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <GPIO_setupPinDirection+0x5a>
    16fe:	5f c0       	rjmp	.+190    	; 0x17be <GPIO_setupPinDirection+0x118>
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	9d 81       	ldd	r25, Y+5	; 0x05
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <GPIO_setupPinDirection+0x66>
    170a:	85 c0       	rjmp	.+266    	; 0x1816 <GPIO_setupPinDirection+0x170>
    170c:	af c0       	rjmp	.+350    	; 0x186c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	a1 f4       	brne	.+40     	; 0x173c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1714:	aa e3       	ldi	r26, 0x3A	; 58
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ea e3       	ldi	r30, 0x3A	; 58
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_setupPinDirection+0x8c>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_setupPinDirection+0x88>
    1736:	84 2b       	or	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	98 c0       	rjmp	.+304    	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    173c:	aa e3       	ldi	r26, 0x3A	; 58
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ea e3       	ldi	r30, 0x3A	; 58
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_setupPinDirection+0xb4>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_setupPinDirection+0xb0>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	83 c0       	rjmp	.+262    	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	a1 f4       	brne	.+40     	; 0x1794 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    176c:	a7 e3       	ldi	r26, 0x37	; 55
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_setupPinDirection+0xe4>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_setupPinDirection+0xe0>
    178e:	84 2b       	or	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	6c c0       	rjmp	.+216    	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1794:	a7 e3       	ldi	r26, 0x37	; 55
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e7 e3       	ldi	r30, 0x37	; 55
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_setupPinDirection+0x10c>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_setupPinDirection+0x108>
    17b6:	80 95       	com	r24
    17b8:	84 23       	and	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	57 c0       	rjmp	.+174    	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	a1 f4       	brne	.+40     	; 0x17ec <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17c4:	a4 e3       	ldi	r26, 0x34	; 52
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e4 e3       	ldi	r30, 0x34	; 52
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_setupPinDirection+0x13c>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_setupPinDirection+0x138>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	40 c0       	rjmp	.+128    	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17ec:	a4 e3       	ldi	r26, 0x34	; 52
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e4 e3       	ldi	r30, 0x34	; 52
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_setupPinDirection+0x164>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_setupPinDirection+0x160>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	2b c0       	rjmp	.+86     	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	a1 f4       	brne	.+40     	; 0x1844 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    181c:	a1 e3       	ldi	r26, 0x31	; 49
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e1 e3       	ldi	r30, 0x31	; 49
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_setupPinDirection+0x194>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_setupPinDirection+0x190>
    183e:	84 2b       	or	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	14 c0       	rjmp	.+40     	; 0x186c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1844:	a1 e3       	ldi	r26, 0x31	; 49
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e1 e3       	ldi	r30, 0x31	; 49
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <GPIO_setupPinDirection+0x1bc>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <GPIO_setupPinDirection+0x1b8>
    1866:	80 95       	com	r24
    1868:	84 23       	and	r24, r20
    186a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <GPIO_writePin+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPIO_writePin+0x8>
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	6a 83       	std	Y+2, r22	; 0x02
    188e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	08 f0       	brcs	.+2      	; 0x1898 <GPIO_writePin+0x1c>
    1896:	d5 c0       	rjmp	.+426    	; 0x1a42 <GPIO_writePin+0x1c6>
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <GPIO_writePin+0x24>
    189e:	d1 c0       	rjmp	.+418    	; 0x1a42 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	3d 83       	std	Y+5, r19	; 0x05
    18a8:	2c 83       	std	Y+4, r18	; 0x04
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	91 05       	cpc	r25, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <GPIO_writePin+0x3a>
    18b4:	43 c0       	rjmp	.+134    	; 0x193c <GPIO_writePin+0xc0>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	2c f4       	brge	.+10     	; 0x18ca <GPIO_writePin+0x4e>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	71 f0       	breq	.+28     	; 0x18e4 <GPIO_writePin+0x68>
    18c8:	bc c0       	rjmp	.+376    	; 0x1a42 <GPIO_writePin+0x1c6>
    18ca:	2c 81       	ldd	r18, Y+4	; 0x04
    18cc:	3d 81       	ldd	r19, Y+5	; 0x05
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <GPIO_writePin+0x5a>
    18d4:	5f c0       	rjmp	.+190    	; 0x1994 <GPIO_writePin+0x118>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <GPIO_writePin+0x66>
    18e0:	85 c0       	rjmp	.+266    	; 0x19ec <GPIO_writePin+0x170>
    18e2:	af c0       	rjmp	.+350    	; 0x1a42 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	a1 f4       	brne	.+40     	; 0x1912 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18ea:	ab e3       	ldi	r26, 0x3B	; 59
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_writePin+0x8c>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_writePin+0x88>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	98 c0       	rjmp	.+304    	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1912:	ab e3       	ldi	r26, 0x3B	; 59
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e3       	ldi	r30, 0x3B	; 59
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <GPIO_writePin+0xb4>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <GPIO_writePin+0xb0>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	83 c0       	rjmp	.+262    	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	a1 f4       	brne	.+40     	; 0x196a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1942:	a8 e3       	ldi	r26, 0x38	; 56
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <GPIO_writePin+0xe4>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <GPIO_writePin+0xe0>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	6c c0       	rjmp	.+216    	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    196a:	a8 e3       	ldi	r26, 0x38	; 56
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <GPIO_writePin+0x10c>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <GPIO_writePin+0x108>
    198c:	80 95       	com	r24
    198e:	84 23       	and	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	57 c0       	rjmp	.+174    	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	a1 f4       	brne	.+40     	; 0x19c2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    199a:	a5 e3       	ldi	r26, 0x35	; 53
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e3       	ldi	r30, 0x35	; 53
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_writePin+0x13c>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_writePin+0x138>
    19bc:	84 2b       	or	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	40 c0       	rjmp	.+128    	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19c2:	a5 e3       	ldi	r26, 0x35	; 53
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e5 e3       	ldi	r30, 0x35	; 53
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_writePin+0x164>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <GPIO_writePin+0x160>
    19e4:	80 95       	com	r24
    19e6:	84 23       	and	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	2b c0       	rjmp	.+86     	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	a1 f4       	brne	.+40     	; 0x1a1a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19f2:	a2 e3       	ldi	r26, 0x32	; 50
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e2 e3       	ldi	r30, 0x32	; 50
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_writePin+0x194>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_writePin+0x190>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a1a:	a2 e3       	ldi	r26, 0x32	; 50
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e2 e3       	ldi	r30, 0x32	; 50
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_writePin+0x1bc>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_writePin+0x1b8>
    1a3c:	80 95       	com	r24
    1a3e:	84 23       	and	r24, r20
    1a40:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <GPIO_readPin+0x6>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <GPIO_readPin+0x8>
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	8a 83       	std	Y+2, r24	; 0x02
    1a62:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a64:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	88 30       	cpi	r24, 0x08	; 8
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <GPIO_readPin+0x1c>
    1a6c:	84 c0       	rjmp	.+264    	; 0x1b76 <GPIO_readPin+0x124>
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <GPIO_readPin+0x24>
    1a74:	80 c0       	rjmp	.+256    	; 0x1b76 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3d 83       	std	Y+5, r19	; 0x05
    1a7e:	2c 83       	std	Y+4, r18	; 0x04
    1a80:	4c 81       	ldd	r20, Y+4	; 0x04
    1a82:	5d 81       	ldd	r21, Y+5	; 0x05
    1a84:	41 30       	cpi	r20, 0x01	; 1
    1a86:	51 05       	cpc	r21, r1
    1a88:	79 f1       	breq	.+94     	; 0x1ae8 <GPIO_readPin+0x96>
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	91 05       	cpc	r25, r1
    1a92:	34 f4       	brge	.+12     	; 0x1aa0 <GPIO_readPin+0x4e>
    1a94:	2c 81       	ldd	r18, Y+4	; 0x04
    1a96:	3d 81       	ldd	r19, Y+5	; 0x05
    1a98:	21 15       	cp	r18, r1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <GPIO_readPin+0x66>
    1a9e:	6b c0       	rjmp	.+214    	; 0x1b76 <GPIO_readPin+0x124>
    1aa0:	4c 81       	ldd	r20, Y+4	; 0x04
    1aa2:	5d 81       	ldd	r21, Y+5	; 0x05
    1aa4:	42 30       	cpi	r20, 0x02	; 2
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	b9 f1       	breq	.+110    	; 0x1b18 <GPIO_readPin+0xc6>
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <GPIO_readPin+0x64>
    1ab4:	49 c0       	rjmp	.+146    	; 0x1b48 <GPIO_readPin+0xf6>
    1ab6:	5f c0       	rjmp	.+190    	; 0x1b76 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ab8:	e9 e3       	ldi	r30, 0x39	; 57
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a9 01       	movw	r20, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_readPin+0x7e>
    1acc:	55 95       	asr	r21
    1ace:	47 95       	ror	r20
    1ad0:	8a 95       	dec	r24
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_readPin+0x7a>
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	88 23       	and	r24, r24
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	49 c0       	rjmp	.+146    	; 0x1b76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    1ae6:	47 c0       	rjmp	.+142    	; 0x1b76 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ae8:	e6 e3       	ldi	r30, 0x36	; 54
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_readPin+0xae>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_readPin+0xaa>
    1b04:	ca 01       	movw	r24, r20
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	90 70       	andi	r25, 0x00	; 0
    1b0a:	88 23       	and	r24, r24
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	31 c0       	rjmp	.+98     	; 0x1b76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b14:	19 82       	std	Y+1, r1	; 0x01
    1b16:	2f c0       	rjmp	.+94     	; 0x1b76 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b18:	e3 e3       	ldi	r30, 0x33	; 51
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <GPIO_readPin+0xde>
    1b2c:	55 95       	asr	r21
    1b2e:	47 95       	ror	r20
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <GPIO_readPin+0xda>
    1b34:	ca 01       	movw	r24, r20
    1b36:	81 70       	andi	r24, 0x01	; 1
    1b38:	90 70       	andi	r25, 0x00	; 0
    1b3a:	88 23       	and	r24, r24
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	19 c0       	rjmp	.+50     	; 0x1b76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b44:	19 82       	std	Y+1, r1	; 0x01
    1b46:	17 c0       	rjmp	.+46     	; 0x1b76 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b48:	e0 e3       	ldi	r30, 0x30	; 48
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a9 01       	movw	r20, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <GPIO_readPin+0x10e>
    1b5c:	55 95       	asr	r21
    1b5e:	47 95       	ror	r20
    1b60:	8a 95       	dec	r24
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <GPIO_readPin+0x10a>
    1b64:	ca 01       	movw	r24, r20
    1b66:	81 70       	andi	r24, 0x01	; 1
    1b68:	90 70       	andi	r25, 0x00	; 0
    1b6a:	88 23       	and	r24, r24
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b74:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <GPIO_setupPortDirection+0x6>
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <GPIO_setupPortDirection+0x8>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	90 f5       	brcc	.+100    	; 0x1c02 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3c 83       	std	Y+4, r19	; 0x04
    1ba6:	2b 83       	std	Y+3, r18	; 0x03
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	91 05       	cpc	r25, r1
    1bb0:	d1 f0       	breq	.+52     	; 0x1be6 <GPIO_setupPortDirection+0x5e>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <GPIO_setupPortDirection+0x3e>
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	61 f0       	breq	.+24     	; 0x1bdc <GPIO_setupPortDirection+0x54>
    1bc4:	1e c0       	rjmp	.+60     	; 0x1c02 <GPIO_setupPortDirection+0x7a>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <GPIO_setupPortDirection+0x68>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	81 f0       	breq	.+32     	; 0x1bfa <GPIO_setupPortDirection+0x72>
    1bda:	13 c0       	rjmp	.+38     	; 0x1c02 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bdc:	ea e3       	ldi	r30, 0x3A	; 58
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	80 83       	st	Z, r24
    1be4:	0e c0       	rjmp	.+28     	; 0x1c02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1be6:	e7 e3       	ldi	r30, 0x37	; 55
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	80 83       	st	Z, r24
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bf0:	e4 e3       	ldi	r30, 0x34	; 52
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	80 83       	st	Z, r24
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bfa:	e1 e3       	ldi	r30, 0x31	; 49
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <GPIO_writePort+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <GPIO_writePort+0x8>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	90 f5       	brcc	.+100    	; 0x1c8a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	3c 83       	std	Y+4, r19	; 0x04
    1c2e:	2b 83       	std	Y+3, r18	; 0x03
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	91 05       	cpc	r25, r1
    1c38:	d1 f0       	breq	.+52     	; 0x1c6e <GPIO_writePort+0x5e>
    1c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	31 05       	cpc	r19, r1
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <GPIO_writePort+0x3e>
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <GPIO_writePort+0x54>
    1c4c:	1e c0       	rjmp	.+60     	; 0x1c8a <GPIO_writePort+0x7a>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	81 f0       	breq	.+32     	; 0x1c78 <GPIO_writePort+0x68>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	91 05       	cpc	r25, r1
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <GPIO_writePort+0x72>
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c64:	eb e3       	ldi	r30, 0x3B	; 59
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	80 83       	st	Z, r24
    1c6c:	0e c0       	rjmp	.+28     	; 0x1c8a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c6e:	e8 e3       	ldi	r30, 0x38	; 56
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	80 83       	st	Z, r24
    1c76:	09 c0       	rjmp	.+18     	; 0x1c8a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c78:	e5 e3       	ldi	r30, 0x35	; 53
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 83       	st	Z, r24
    1c80:	04 c0       	rjmp	.+8      	; 0x1c8a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c82:	e2 e3       	ldi	r30, 0x32	; 50
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <GPIO_readPort+0x6>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <GPIO_readPort+0x8>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ca6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	84 30       	cpi	r24, 0x04	; 4
    1cac:	90 f5       	brcc	.+100    	; 0x1d12 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	3c 83       	std	Y+4, r19	; 0x04
    1cb6:	2b 83       	std	Y+3, r18	; 0x03
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	d1 f0       	breq	.+52     	; 0x1cf6 <GPIO_readPort+0x5e>
    1cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <GPIO_readPort+0x3e>
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	61 f0       	breq	.+24     	; 0x1cec <GPIO_readPort+0x54>
    1cd4:	1e c0       	rjmp	.+60     	; 0x1d12 <GPIO_readPort+0x7a>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	81 f0       	breq	.+32     	; 0x1d00 <GPIO_readPort+0x68>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	83 30       	cpi	r24, 0x03	; 3
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	81 f0       	breq	.+32     	; 0x1d0a <GPIO_readPort+0x72>
    1cea:	13 c0       	rjmp	.+38     	; 0x1d12 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cec:	e9 e3       	ldi	r30, 0x39	; 57
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	0e c0       	rjmp	.+28     	; 0x1d12 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cf6:	e6 e3       	ldi	r30, 0x36	; 54
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d00:	e3 e3       	ldi	r30, 0x33	; 51
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	04 c0       	rjmp	.+8      	; 0x1d12 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d0a:	e0 e3       	ldi	r30, 0x30	; 48
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	60 97       	sbiw	r28, 0x10	; 16
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	65 e0       	ldi	r22, 0x05	; 5
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	66 e0       	ldi	r22, 0x06	; 6
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	67 e0       	ldi	r22, 0x07	; 7
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	63 e0       	ldi	r22, 0x03	; 3
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	64 e0       	ldi	r22, 0x04	; 4
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	65 e0       	ldi	r22, 0x05	; 5
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d86:	1f 86       	std	Y+15, r1	; 0x0f
    1d88:	b4 c0       	rjmp	.+360    	; 0x1ef2 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9c 5f       	subi	r25, 0xFC	; 252
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	69 2f       	mov	r22, r25
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1da0:	b0 e4       	ldi	r27, 0x40	; 64
    1da2:	8b 87       	std	Y+11, r24	; 0x0b
    1da4:	9c 87       	std	Y+12, r25	; 0x0c
    1da6:	ad 87       	std	Y+13, r26	; 0x0d
    1da8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a ef       	ldi	r20, 0xFA	; 250
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	8f 83       	std	Y+7, r24	; 0x07
    1dc4:	98 87       	std	Y+8, r25	; 0x08
    1dc6:	a9 87       	std	Y+9, r26	; 0x09
    1dc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	2c f4       	brge	.+10     	; 0x1dec <KEYPAD_getPressedKey+0xca>
		__ticks = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	3f c0       	rjmp	.+126    	; 0x1e6a <KEYPAD_getPressedKey+0x148>
	else if (__tmp > 65535)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	4c f5       	brge	.+82     	; 0x1e56 <KEYPAD_getPressedKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <KEYPAD_getPressedKey+0x12a>
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9c 83       	std	Y+4, r25	; 0x04
    1e34:	8b 83       	std	Y+3, r24	; 0x03
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <KEYPAD_getPressedKey+0x118>
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <KEYPAD_getPressedKey+0x10c>
    1e54:	14 c0       	rjmp	.+40     	; 0x1e7e <KEYPAD_getPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <KEYPAD_getPressedKey+0x154>
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
             _delay_ms(5);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	98 2f       	mov	r25, r24
    1e82:	9c 5f       	subi	r25, 0xFC	; 252
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	69 2f       	mov	r22, r25
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e8e:	18 8a       	std	Y+16, r1	; 0x10
    1e90:	22 c0       	rjmp	.+68     	; 0x1ed6 <KEYPAD_getPressedKey+0x1b4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1e92:	88 89       	ldd	r24, Y+16	; 0x10
    1e94:	98 2f       	mov	r25, r24
    1e96:	9e 5f       	subi	r25, 0xFE	; 254
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	69 2f       	mov	r22, r25
    1e9c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <GPIO_readPin>
    1ea0:	88 23       	and	r24, r24
    1ea2:	b1 f4       	brne	.+44     	; 0x1ed0 <KEYPAD_getPressedKey+0x1ae>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	88 89       	ldd	r24, Y+16	; 0x10
    1eb6:	89 0f       	add	r24, r25
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1ebe:	60 96       	adiw	r28, 0x10	; 16
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
             _delay_ms(5);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ed0:	88 89       	ldd	r24, Y+16	; 0x10
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	88 8b       	std	Y+16, r24	; 0x10
    1ed6:	88 89       	ldd	r24, Y+16	; 0x10
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	d8 f2       	brcs	.-74     	; 0x1e92 <KEYPAD_getPressedKey+0x170>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ede:	98 2f       	mov	r25, r24
    1ee0:	9c 5f       	subi	r25, 0xFC	; 252
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	69 2f       	mov	r22, r25
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	8f 87       	std	Y+15, r24	; 0x0f
    1ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef4:	84 30       	cpi	r24, 0x04	; 4
    1ef6:	08 f4       	brcc	.+2      	; 0x1efa <KEYPAD_getPressedKey+0x1d8>
    1ef8:	48 cf       	rjmp	.-368    	; 0x1d8a <KEYPAD_getPressedKey+0x68>
    1efa:	45 cf       	rjmp	.-374    	; 0x1d86 <KEYPAD_getPressedKey+0x64>

00001efc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f0a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3c 83       	std	Y+4, r19	; 0x04
    1f14:	2b 83       	std	Y+3, r18	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	88 30       	cpi	r24, 0x08	; 8
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f20:	70 c0       	rjmp	.+224    	; 0x2002 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	29 30       	cpi	r18, 0x09	; 9
    1f28:	31 05       	cpc	r19, r1
    1f2a:	5c f5       	brge	.+86     	; 0x1f82 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f36:	59 c0       	rjmp	.+178    	; 0x1fea <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	25 30       	cpi	r18, 0x05	; 5
    1f3e:	31 05       	cpc	r19, r1
    1f40:	9c f4       	brge	.+38     	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 05       	cpc	r25, r1
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f4c:	48 c0       	rjmp	.+144    	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	23 30       	cpi	r18, 0x03	; 3
    1f54:	31 05       	cpc	r19, r1
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f58:	45 c0       	rjmp	.+138    	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f64:	39 c0       	rjmp	.+114    	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f66:	67 c0       	rjmp	.+206    	; 0x2036 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	26 30       	cpi	r18, 0x06	; 6
    1f6e:	31 05       	cpc	r19, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f72:	41 c0       	rjmp	.+130    	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	87 30       	cpi	r24, 0x07	; 7
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f7e:	3e c0       	rjmp	.+124    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f80:	37 c0       	rjmp	.+110    	; 0x1ff0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f82:	2b 81       	ldd	r18, Y+3	; 0x03
    1f84:	3c 81       	ldd	r19, Y+4	; 0x04
    1f86:	2c 30       	cpi	r18, 0x0C	; 12
    1f88:	31 05       	cpc	r19, r1
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f8c:	46 c0       	rjmp	.+140    	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	8d 30       	cpi	r24, 0x0D	; 13
    1f94:	91 05       	cpc	r25, r1
    1f96:	5c f4       	brge	.+22     	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f98:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9c:	2a 30       	cpi	r18, 0x0A	; 10
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	b1 f1       	breq	.+108    	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	8b 30       	cpi	r24, 0x0B	; 11
    1fa8:	91 05       	cpc	r25, r1
    1faa:	a4 f5       	brge	.+104    	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fac:	2d c0       	rjmp	.+90     	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fae:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb2:	2e 30       	cpi	r18, 0x0E	; 14
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	b9 f1       	breq	.+110    	; 0x2026 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	8e 30       	cpi	r24, 0x0E	; 14
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	7c f1       	brlt	.+94     	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc6:	2f 30       	cpi	r18, 0x0F	; 15
    1fc8:	31 05       	cpc	r19, r1
    1fca:	79 f1       	breq	.+94     	; 0x202a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	80 31       	cpi	r24, 0x10	; 16
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	69 f1       	breq	.+90     	; 0x2030 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fd6:	2f c0       	rjmp	.+94     	; 0x2036 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1fd8:	87 e0       	ldi	r24, 0x07	; 7
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	2e c0       	rjmp	.+92     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1fde:	88 e0       	ldi	r24, 0x08	; 8
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	2b c0       	rjmp	.+86     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1fe4:	89 e0       	ldi	r24, 0x09	; 9
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	28 c0       	rjmp	.+80     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1fea:	85 e2       	ldi	r24, 0x25	; 37
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	25 c0       	rjmp	.+74     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ff0:	84 e0       	ldi	r24, 0x04	; 4
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	22 c0       	rjmp	.+68     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ff6:	85 e0       	ldi	r24, 0x05	; 5
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	1f c0       	rjmp	.+62     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ffc:	86 e0       	ldi	r24, 0x06	; 6
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	1c c0       	rjmp	.+56     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2002:	8a e2       	ldi	r24, 0x2A	; 42
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	19 c0       	rjmp	.+50     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	16 c0       	rjmp	.+44     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	13 c0       	rjmp	.+38     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	10 c0       	rjmp	.+32     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    201a:	8d e2       	ldi	r24, 0x2D	; 45
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	0d c0       	rjmp	.+26     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2020:	8d e0       	ldi	r24, 0x0D	; 13
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	0a c0       	rjmp	.+20     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	08 c0       	rjmp	.+16     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    202a:	8d e3       	ldi	r24, 0x3D	; 61
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	05 c0       	rjmp	.+10     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2030:	8b e2       	ldi	r24, 0x2B	; 43
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	02 c0       	rjmp	.+4      	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	2e 97       	sbiw	r28, 0x0e	; 14
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <GPIO_setupPinDirection>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 ea       	ldi	r26, 0xA0	; 160
    2082:	b1 e4       	ldi	r27, 0x41	; 65
    2084:	8b 87       	std	Y+11, r24	; 0x0b
    2086:	9c 87       	std	Y+12, r25	; 0x0c
    2088:	ad 87       	std	Y+13, r26	; 0x0d
    208a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6b 85       	ldd	r22, Y+11	; 0x0b
    208e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2090:	8d 85       	ldd	r24, Y+13	; 0x0d
    2092:	9e 85       	ldd	r25, Y+14	; 0x0e
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8f 83       	std	Y+7, r24	; 0x07
    20a6:	98 87       	std	Y+8, r25	; 0x08
    20a8:	a9 87       	std	Y+9, r26	; 0x09
    20aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_init+0x84>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_init+0x102>
	else if (__tmp > 65535)
    20ce:	6f 81       	ldd	r22, Y+7	; 0x07
    20d0:	78 85       	ldd	r23, Y+8	; 0x08
    20d2:	89 85       	ldd	r24, Y+9	; 0x09
    20d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_init+0xe4>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9c 83       	std	Y+4, r25	; 0x04
    2116:	8b 83       	std	Y+3, r24	; 0x03
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_init+0xd2>
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_init+0xc6>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_init+0x10e>
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	6f ef       	ldi	r22, 0xFF	; 255
    2164:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2168:	88 e3       	ldi	r24, 0x38	; 56
    216a:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    216e:	8c e0       	ldi	r24, 0x0C	; 12
    2170:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_sendCommand>
}
    217a:	2e 96       	adiw	r28, 0x0e	; 14
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	e9 97       	sbiw	r28, 0x39	; 57
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e8       	ldi	r26, 0x80	; 128
    21b2:	bf e3       	ldi	r27, 0x3F	; 63
    21b4:	8d ab       	std	Y+53, r24	; 0x35
    21b6:	9e ab       	std	Y+54, r25	; 0x36
    21b8:	af ab       	std	Y+55, r26	; 0x37
    21ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6d a9       	ldd	r22, Y+53	; 0x35
    21be:	7e a9       	ldd	r23, Y+54	; 0x36
    21c0:	8f a9       	ldd	r24, Y+55	; 0x37
    21c2:	98 ad       	ldd	r25, Y+56	; 0x38
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a ef       	ldi	r20, 0xFA	; 250
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	89 ab       	std	Y+49, r24	; 0x31
    21d6:	9a ab       	std	Y+50, r25	; 0x32
    21d8:	ab ab       	std	Y+51, r26	; 0x33
    21da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21dc:	69 a9       	ldd	r22, Y+49	; 0x31
    21de:	7a a9       	ldd	r23, Y+50	; 0x32
    21e0:	8b a9       	ldd	r24, Y+51	; 0x33
    21e2:	9c a9       	ldd	r25, Y+52	; 0x34
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_sendCommand+0x72>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	98 ab       	std	Y+48, r25	; 0x30
    21fa:	8f a7       	std	Y+47, r24	; 0x2f
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    21fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2200:	7a a9       	ldd	r23, Y+50	; 0x32
    2202:	8b a9       	ldd	r24, Y+51	; 0x33
    2204:	9c a9       	ldd	r25, Y+52	; 0x34
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6d a9       	ldd	r22, Y+53	; 0x35
    2218:	7e a9       	ldd	r23, Y+54	; 0x36
    221a:	8f a9       	ldd	r24, Y+55	; 0x37
    221c:	98 ad       	ldd	r25, Y+56	; 0x38
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	98 ab       	std	Y+48, r25	; 0x30
    223c:	8f a7       	std	Y+47, r24	; 0x2f
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_sendCommand+0xd2>
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9e a7       	std	Y+46, r25	; 0x2e
    2246:	8d a7       	std	Y+45, r24	; 0x2d
    2248:	8d a5       	ldd	r24, Y+45	; 0x2d
    224a:	9e a5       	ldd	r25, Y+46	; 0x2e
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_sendCommand+0xc0>
    2250:	9e a7       	std	Y+46, r25	; 0x2e
    2252:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	98 ab       	std	Y+48, r25	; 0x30
    225c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2260:	98 a9       	ldd	r25, Y+48	; 0x30
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_sendCommand+0xb4>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	69 a9       	ldd	r22, Y+49	; 0x31
    226a:	7a a9       	ldd	r23, Y+50	; 0x32
    226c:	8b a9       	ldd	r24, Y+51	; 0x33
    226e:	9c a9       	ldd	r25, Y+52	; 0x34
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	98 ab       	std	Y+48, r25	; 0x30
    227a:	8f a7       	std	Y+47, r24	; 0x2f
    227c:	8f a5       	ldd	r24, Y+47	; 0x2f
    227e:	98 a9       	ldd	r25, Y+48	; 0x30
    2280:	9c a7       	std	Y+44, r25	; 0x2c
    2282:	8b a7       	std	Y+43, r24	; 0x2b
    2284:	8b a5       	ldd	r24, Y+43	; 0x2b
    2286:	9c a5       	ldd	r25, Y+44	; 0x2c
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_sendCommand+0xfc>
    228c:	9c a7       	std	Y+44, r25	; 0x2c
    228e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	62 e0       	ldi	r22, 0x02	; 2
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e8       	ldi	r26, 0x80	; 128
    22a0:	bf e3       	ldi	r27, 0x3F	; 63
    22a2:	8f a3       	std	Y+39, r24	; 0x27
    22a4:	98 a7       	std	Y+40, r25	; 0x28
    22a6:	a9 a7       	std	Y+41, r26	; 0x29
    22a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22aa:	6f a1       	ldd	r22, Y+39	; 0x27
    22ac:	78 a5       	ldd	r23, Y+40	; 0x28
    22ae:	89 a5       	ldd	r24, Y+41	; 0x29
    22b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a ef       	ldi	r20, 0xFA	; 250
    22b8:	54 e4       	ldi	r21, 0x44	; 68
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	8b a3       	std	Y+35, r24	; 0x23
    22c4:	9c a3       	std	Y+36, r25	; 0x24
    22c6:	ad a3       	std	Y+37, r26	; 0x25
    22c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e8       	ldi	r20, 0x80	; 128
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22de:	88 23       	and	r24, r24
    22e0:	2c f4       	brge	.+10     	; 0x22ec <LCD_sendCommand+0x160>
		__ticks = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9a a3       	std	Y+34, r25	; 0x22
    22e8:	89 a3       	std	Y+33, r24	; 0x21
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    22ec:	6b a1       	ldd	r22, Y+35	; 0x23
    22ee:	7c a1       	ldd	r23, Y+36	; 0x24
    22f0:	8d a1       	ldd	r24, Y+37	; 0x25
    22f2:	9e a1       	ldd	r25, Y+38	; 0x26
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	3f ef       	ldi	r19, 0xFF	; 255
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	57 e4       	ldi	r21, 0x47	; 71
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	4c f5       	brge	.+82     	; 0x2356 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2304:	6f a1       	ldd	r22, Y+39	; 0x27
    2306:	78 a5       	ldd	r23, Y+40	; 0x28
    2308:	89 a5       	ldd	r24, Y+41	; 0x29
    230a:	9a a5       	ldd	r25, Y+42	; 0x2a
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e2       	ldi	r20, 0x20	; 32
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
    232c:	0f c0       	rjmp	.+30     	; 0x234c <LCD_sendCommand+0x1c0>
    232e:	88 ec       	ldi	r24, 0xC8	; 200
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	98 a3       	std	Y+32, r25	; 0x20
    2334:	8f 8f       	std	Y+31, r24	; 0x1f
    2336:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2338:	98 a1       	ldd	r25, Y+32	; 0x20
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_sendCommand+0x1ae>
    233e:	98 a3       	std	Y+32, r25	; 0x20
    2340:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234c:	89 a1       	ldd	r24, Y+33	; 0x21
    234e:	9a a1       	ldd	r25, Y+34	; 0x22
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	69 f7       	brne	.-38     	; 0x232e <LCD_sendCommand+0x1a2>
    2354:	14 c0       	rjmp	.+40     	; 0x237e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2356:	6b a1       	ldd	r22, Y+35	; 0x23
    2358:	7c a1       	ldd	r23, Y+36	; 0x24
    235a:	8d a1       	ldd	r24, Y+37	; 0x25
    235c:	9e a1       	ldd	r25, Y+38	; 0x26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9a a3       	std	Y+34, r25	; 0x22
    2368:	89 a3       	std	Y+33, r24	; 0x21
    236a:	89 a1       	ldd	r24, Y+33	; 0x21
    236c:	9a a1       	ldd	r25, Y+34	; 0x22
    236e:	9e 8f       	std	Y+30, r25	; 0x1e
    2370:	8d 8f       	std	Y+29, r24	; 0x1d
    2372:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2374:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_sendCommand+0x1ea>
    237a:	9e 8f       	std	Y+30, r25	; 0x1e
    237c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	69 ad       	ldd	r22, Y+57	; 0x39
    2382:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePort>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e8       	ldi	r26, 0x80	; 128
    238c:	bf e3       	ldi	r27, 0x3F	; 63
    238e:	89 8f       	std	Y+25, r24	; 0x19
    2390:	9a 8f       	std	Y+26, r25	; 0x1a
    2392:	ab 8f       	std	Y+27, r26	; 0x1b
    2394:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	69 8d       	ldd	r22, Y+25	; 0x19
    2398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8d 8b       	std	Y+21, r24	; 0x15
    23b0:	9e 8b       	std	Y+22, r25	; 0x16
    23b2:	af 8b       	std	Y+23, r26	; 0x17
    23b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    23d8:	6d 89       	ldd	r22, Y+21	; 0x15
    23da:	7e 89       	ldd	r23, Y+22	; 0x16
    23dc:	8f 89       	ldd	r24, Y+23	; 0x17
    23de:	98 8d       	ldd	r25, Y+24	; 0x18
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	69 8d       	ldd	r22, Y+25	; 0x19
    23f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9c 8b       	std	Y+20, r25	; 0x14
    2416:	8b 8b       	std	Y+19, r24	; 0x13
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <LCD_sendCommand+0x2ac>
    241a:	88 ec       	ldi	r24, 0xC8	; 200
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9a 8b       	std	Y+18, r25	; 0x12
    2420:	89 8b       	std	Y+17, r24	; 0x11
    2422:	89 89       	ldd	r24, Y+17	; 0x11
    2424:	9a 89       	ldd	r25, Y+18	; 0x12
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0x29a>
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8b 89       	ldd	r24, Y+19	; 0x13
    2430:	9c 89       	ldd	r25, Y+20	; 0x14
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9c 8b       	std	Y+20, r25	; 0x14
    2436:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8b 89       	ldd	r24, Y+19	; 0x13
    243a:	9c 89       	ldd	r25, Y+20	; 0x14
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <LCD_sendCommand+0x28e>
    2440:	14 c0       	rjmp	.+40     	; 0x246a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	6d 89       	ldd	r22, Y+21	; 0x15
    2444:	7e 89       	ldd	r23, Y+22	; 0x16
    2446:	8f 89       	ldd	r24, Y+23	; 0x17
    2448:	98 8d       	ldd	r25, Y+24	; 0x18
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9c 8b       	std	Y+20, r25	; 0x14
    2454:	8b 8b       	std	Y+19, r24	; 0x13
    2456:	8b 89       	ldd	r24, Y+19	; 0x13
    2458:	9c 89       	ldd	r25, Y+20	; 0x14
    245a:	98 8b       	std	Y+16, r25	; 0x10
    245c:	8f 87       	std	Y+15, r24	; 0x0f
    245e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2460:	98 89       	ldd	r25, Y+16	; 0x10
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_sendCommand+0x2d6>
    2466:	98 8b       	std	Y+16, r25	; 0x10
    2468:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	62 e0       	ldi	r22, 0x02	; 2
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e8       	ldi	r26, 0x80	; 128
    247a:	bf e3       	ldi	r27, 0x3F	; 63
    247c:	8b 87       	std	Y+11, r24	; 0x0b
    247e:	9c 87       	std	Y+12, r25	; 0x0c
    2480:	ad 87       	std	Y+13, r26	; 0x0d
    2482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6b 85       	ldd	r22, Y+11	; 0x0b
    2486:	7c 85       	ldd	r23, Y+12	; 0x0c
    2488:	8d 85       	ldd	r24, Y+13	; 0x0d
    248a:	9e 85       	ldd	r25, Y+14	; 0x0e
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a ef       	ldi	r20, 0xFA	; 250
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8f 83       	std	Y+7, r24	; 0x07
    249e:	98 87       	std	Y+8, r25	; 0x08
    24a0:	a9 87       	std	Y+9, r26	; 0x09
    24a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LCD_sendCommand+0x39a>
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_sendCommand+0x388>
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LCD_sendCommand+0x37c>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6f 81       	ldd	r22, Y+7	; 0x07
    2532:	78 85       	ldd	r23, Y+8	; 0x08
    2534:	89 85       	ldd	r24, Y+9	; 0x09
    2536:	9a 85       	ldd	r25, Y+10	; 0x0a
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_sendCommand+0x3c4>
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2558:	e9 96       	adiw	r28, 0x39	; 57
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	e9 97       	sbiw	r28, 0x39	; 57
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	a0 e8       	ldi	r26, 0x80	; 128
    2590:	bf e3       	ldi	r27, 0x3F	; 63
    2592:	8d ab       	std	Y+53, r24	; 0x35
    2594:	9e ab       	std	Y+54, r25	; 0x36
    2596:	af ab       	std	Y+55, r26	; 0x37
    2598:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	6d a9       	ldd	r22, Y+53	; 0x35
    259c:	7e a9       	ldd	r23, Y+54	; 0x36
    259e:	8f a9       	ldd	r24, Y+55	; 0x37
    25a0:	98 ad       	ldd	r25, Y+56	; 0x38
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	89 ab       	std	Y+49, r24	; 0x31
    25b4:	9a ab       	std	Y+50, r25	; 0x32
    25b6:	ab ab       	std	Y+51, r26	; 0x33
    25b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	7a a9       	ldd	r23, Y+50	; 0x32
    25be:	8b a9       	ldd	r24, Y+51	; 0x33
    25c0:	9c a9       	ldd	r25, Y+52	; 0x34
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	2c f4       	brge	.+10     	; 0x25dc <LCD_displayCharacter+0x72>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	98 ab       	std	Y+48, r25	; 0x30
    25d8:	8f a7       	std	Y+47, r24	; 0x2f
    25da:	3f c0       	rjmp	.+126    	; 0x265a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    25dc:	69 a9       	ldd	r22, Y+49	; 0x31
    25de:	7a a9       	ldd	r23, Y+50	; 0x32
    25e0:	8b a9       	ldd	r24, Y+51	; 0x33
    25e2:	9c a9       	ldd	r25, Y+52	; 0x34
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	57 e4       	ldi	r21, 0x47	; 71
    25ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	4c f5       	brge	.+82     	; 0x2646 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	6d a9       	ldd	r22, Y+53	; 0x35
    25f6:	7e a9       	ldd	r23, Y+54	; 0x36
    25f8:	8f a9       	ldd	r24, Y+55	; 0x37
    25fa:	98 ad       	ldd	r25, Y+56	; 0x38
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
    261c:	0f c0       	rjmp	.+30     	; 0x263c <LCD_displayCharacter+0xd2>
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9e a7       	std	Y+46, r25	; 0x2e
    2624:	8d a7       	std	Y+45, r24	; 0x2d
    2626:	8d a5       	ldd	r24, Y+45	; 0x2d
    2628:	9e a5       	ldd	r25, Y+46	; 0x2e
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_displayCharacter+0xc0>
    262e:	9e a7       	std	Y+46, r25	; 0x2e
    2630:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8f a5       	ldd	r24, Y+47	; 0x2f
    2634:	98 a9       	ldd	r25, Y+48	; 0x30
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	98 ab       	std	Y+48, r25	; 0x30
    263a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8f a5       	ldd	r24, Y+47	; 0x2f
    263e:	98 a9       	ldd	r25, Y+48	; 0x30
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <LCD_displayCharacter+0xb4>
    2644:	14 c0       	rjmp	.+40     	; 0x266e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	69 a9       	ldd	r22, Y+49	; 0x31
    2648:	7a a9       	ldd	r23, Y+50	; 0x32
    264a:	8b a9       	ldd	r24, Y+51	; 0x33
    264c:	9c a9       	ldd	r25, Y+52	; 0x34
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	98 ab       	std	Y+48, r25	; 0x30
    2658:	8f a7       	std	Y+47, r24	; 0x2f
    265a:	8f a5       	ldd	r24, Y+47	; 0x2f
    265c:	98 a9       	ldd	r25, Y+48	; 0x30
    265e:	9c a7       	std	Y+44, r25	; 0x2c
    2660:	8b a7       	std	Y+43, r24	; 0x2b
    2662:	8b a5       	ldd	r24, Y+43	; 0x2b
    2664:	9c a5       	ldd	r25, Y+44	; 0x2c
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_displayCharacter+0xfc>
    266a:	9c a7       	std	Y+44, r25	; 0x2c
    266c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a0 e8       	ldi	r26, 0x80	; 128
    267e:	bf e3       	ldi	r27, 0x3F	; 63
    2680:	8f a3       	std	Y+39, r24	; 0x27
    2682:	98 a7       	std	Y+40, r25	; 0x28
    2684:	a9 a7       	std	Y+41, r26	; 0x29
    2686:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6f a1       	ldd	r22, Y+39	; 0x27
    268a:	78 a5       	ldd	r23, Y+40	; 0x28
    268c:	89 a5       	ldd	r24, Y+41	; 0x29
    268e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a ef       	ldi	r20, 0xFA	; 250
    2696:	54 e4       	ldi	r21, 0x44	; 68
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	8b a3       	std	Y+35, r24	; 0x23
    26a2:	9c a3       	std	Y+36, r25	; 0x24
    26a4:	ad a3       	std	Y+37, r26	; 0x25
    26a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26a8:	6b a1       	ldd	r22, Y+35	; 0x23
    26aa:	7c a1       	ldd	r23, Y+36	; 0x24
    26ac:	8d a1       	ldd	r24, Y+37	; 0x25
    26ae:	9e a1       	ldd	r25, Y+38	; 0x26
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <LCD_displayCharacter+0x160>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9a a3       	std	Y+34, r25	; 0x22
    26c6:	89 a3       	std	Y+33, r24	; 0x21
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    26ca:	6b a1       	ldd	r22, Y+35	; 0x23
    26cc:	7c a1       	ldd	r23, Y+36	; 0x24
    26ce:	8d a1       	ldd	r24, Y+37	; 0x25
    26d0:	9e a1       	ldd	r25, Y+38	; 0x26
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	6f a1       	ldd	r22, Y+39	; 0x27
    26e4:	78 a5       	ldd	r23, Y+40	; 0x28
    26e6:	89 a5       	ldd	r24, Y+41	; 0x29
    26e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9a a3       	std	Y+34, r25	; 0x22
    2708:	89 a3       	std	Y+33, r24	; 0x21
    270a:	0f c0       	rjmp	.+30     	; 0x272a <LCD_displayCharacter+0x1c0>
    270c:	88 ec       	ldi	r24, 0xC8	; 200
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	98 a3       	std	Y+32, r25	; 0x20
    2712:	8f 8f       	std	Y+31, r24	; 0x1f
    2714:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2716:	98 a1       	ldd	r25, Y+32	; 0x20
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_displayCharacter+0x1ae>
    271c:	98 a3       	std	Y+32, r25	; 0x20
    271e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	89 a1       	ldd	r24, Y+33	; 0x21
    2722:	9a a1       	ldd	r25, Y+34	; 0x22
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9a a3       	std	Y+34, r25	; 0x22
    2728:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	89 a1       	ldd	r24, Y+33	; 0x21
    272c:	9a a1       	ldd	r25, Y+34	; 0x22
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <LCD_displayCharacter+0x1a2>
    2732:	14 c0       	rjmp	.+40     	; 0x275c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	6b a1       	ldd	r22, Y+35	; 0x23
    2736:	7c a1       	ldd	r23, Y+36	; 0x24
    2738:	8d a1       	ldd	r24, Y+37	; 0x25
    273a:	9e a1       	ldd	r25, Y+38	; 0x26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9a a3       	std	Y+34, r25	; 0x22
    2746:	89 a3       	std	Y+33, r24	; 0x21
    2748:	89 a1       	ldd	r24, Y+33	; 0x21
    274a:	9a a1       	ldd	r25, Y+34	; 0x22
    274c:	9e 8f       	std	Y+30, r25	; 0x1e
    274e:	8d 8f       	std	Y+29, r24	; 0x1d
    2750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_displayCharacter+0x1ea>
    2758:	9e 8f       	std	Y+30, r25	; 0x1e
    275a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	69 ad       	ldd	r22, Y+57	; 0x39
    2760:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <GPIO_writePort>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e8       	ldi	r26, 0x80	; 128
    276a:	bf e3       	ldi	r27, 0x3F	; 63
    276c:	89 8f       	std	Y+25, r24	; 0x19
    276e:	9a 8f       	std	Y+26, r25	; 0x1a
    2770:	ab 8f       	std	Y+27, r26	; 0x1b
    2772:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	69 8d       	ldd	r22, Y+25	; 0x19
    2776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8d 8b       	std	Y+21, r24	; 0x15
    278e:	9e 8b       	std	Y+22, r25	; 0x16
    2790:	af 8b       	std	Y+23, r26	; 0x17
    2792:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2794:	6d 89       	ldd	r22, Y+21	; 0x15
    2796:	7e 89       	ldd	r23, Y+22	; 0x16
    2798:	8f 89       	ldd	r24, Y+23	; 0x17
    279a:	98 8d       	ldd	r25, Y+24	; 0x18
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9c 8b       	std	Y+20, r25	; 0x14
    27b2:	8b 8b       	std	Y+19, r24	; 0x13
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    27b6:	6d 89       	ldd	r22, Y+21	; 0x15
    27b8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ba:	8f 89       	ldd	r24, Y+23	; 0x17
    27bc:	98 8d       	ldd	r25, Y+24	; 0x18
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	69 8d       	ldd	r22, Y+25	; 0x19
    27d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <LCD_displayCharacter+0x2ac>
    27f8:	88 ec       	ldi	r24, 0xC8	; 200
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9a 8b       	std	Y+18, r25	; 0x12
    27fe:	89 8b       	std	Y+17, r24	; 0x11
    2800:	89 89       	ldd	r24, Y+17	; 0x11
    2802:	9a 89       	ldd	r25, Y+18	; 0x12
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_displayCharacter+0x29a>
    2808:	9a 8b       	std	Y+18, r25	; 0x12
    280a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8b 89       	ldd	r24, Y+19	; 0x13
    280e:	9c 89       	ldd	r25, Y+20	; 0x14
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <LCD_displayCharacter+0x28e>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6d 89       	ldd	r22, Y+21	; 0x15
    2822:	7e 89       	ldd	r23, Y+22	; 0x16
    2824:	8f 89       	ldd	r24, Y+23	; 0x17
    2826:	98 8d       	ldd	r25, Y+24	; 0x18
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9c 8b       	std	Y+20, r25	; 0x14
    2832:	8b 8b       	std	Y+19, r24	; 0x13
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	9c 89       	ldd	r25, Y+20	; 0x14
    2838:	98 8b       	std	Y+16, r25	; 0x10
    283a:	8f 87       	std	Y+15, r24	; 0x0f
    283c:	8f 85       	ldd	r24, Y+15	; 0x0f
    283e:	98 89       	ldd	r25, Y+16	; 0x10
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_displayCharacter+0x2d6>
    2844:	98 8b       	std	Y+16, r25	; 0x10
    2846:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	62 e0       	ldi	r22, 0x02	; 2
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPIO_writePin>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e8       	ldi	r26, 0x80	; 128
    2858:	bf e3       	ldi	r27, 0x3F	; 63
    285a:	8b 87       	std	Y+11, r24	; 0x0b
    285c:	9c 87       	std	Y+12, r25	; 0x0c
    285e:	ad 87       	std	Y+13, r26	; 0x0d
    2860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8f 83       	std	Y+7, r24	; 0x07
    287c:	98 87       	std	Y+8, r25	; 0x08
    287e:	a9 87       	std	Y+9, r26	; 0x09
    2880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <LCD_displayCharacter+0x39a>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_displayCharacter+0x388>
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <LCD_displayCharacter+0x37c>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_displayCharacter+0x3c4>
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2936:	e9 96       	adiw	r28, 0x39	; 57
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <LCD_displayString+0x6>
    294e:	0f 92       	push	r0
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	9b 83       	std	Y+3, r25	; 0x03
    2956:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2958:	19 82       	std	Y+1, r1	; 0x01
    295a:	0e c0       	rjmp	.+28     	; 0x2978 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	9b 81       	ldd	r25, Y+3	; 0x03
    2966:	fc 01       	movw	r30, r24
    2968:	e2 0f       	add	r30, r18
    296a:	f3 1f       	adc	r31, r19
    296c:	80 81       	ld	r24, Z
    296e:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayCharacter>
		i++;
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	9b 81       	ldd	r25, Y+3	; 0x03
    2982:	fc 01       	movw	r30, r24
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
    2988:	80 81       	ld	r24, Z
    298a:	88 23       	and	r24, r24
    298c:	39 f7       	brne	.-50     	; 0x295c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <LCD_moveCursor+0x6>
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <LCD_moveCursor+0x8>
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	3d 83       	std	Y+5, r19	; 0x05
    29b4:	2c 83       	std	Y+4, r18	; 0x04
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	91 05       	cpc	r25, r1
    29be:	c1 f0       	breq	.+48     	; 0x29f0 <LCD_moveCursor+0x56>
    29c0:	2c 81       	ldd	r18, Y+4	; 0x04
    29c2:	3d 81       	ldd	r19, Y+5	; 0x05
    29c4:	22 30       	cpi	r18, 0x02	; 2
    29c6:	31 05       	cpc	r19, r1
    29c8:	2c f4       	brge	.+10     	; 0x29d4 <LCD_moveCursor+0x3a>
    29ca:	8c 81       	ldd	r24, Y+4	; 0x04
    29cc:	9d 81       	ldd	r25, Y+5	; 0x05
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	61 f0       	breq	.+24     	; 0x29ea <LCD_moveCursor+0x50>
    29d2:	19 c0       	rjmp	.+50     	; 0x2a06 <LCD_moveCursor+0x6c>
    29d4:	2c 81       	ldd	r18, Y+4	; 0x04
    29d6:	3d 81       	ldd	r19, Y+5	; 0x05
    29d8:	22 30       	cpi	r18, 0x02	; 2
    29da:	31 05       	cpc	r19, r1
    29dc:	69 f0       	breq	.+26     	; 0x29f8 <LCD_moveCursor+0x5e>
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	9d 81       	ldd	r25, Y+5	; 0x05
    29e2:	83 30       	cpi	r24, 0x03	; 3
    29e4:	91 05       	cpc	r25, r1
    29e6:	61 f0       	breq	.+24     	; 0x2a00 <LCD_moveCursor+0x66>
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	0b c0       	rjmp	.+22     	; 0x2a06 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	80 5c       	subi	r24, 0xC0	; 192
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	07 c0       	rjmp	.+14     	; 0x2a06 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	80 5f       	subi	r24, 0xF0	; 240
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	03 c0       	rjmp	.+6      	; 0x2a06 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	80 5b       	subi	r24, 0xB0	; 176
    2a04:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	80 68       	ori	r24, 0x80	; 128
    2a0a:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_sendCommand>
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <LCD_displayStringRowColumn+0x6>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <LCD_displayStringRowColumn+0x8>
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	6a 83       	std	Y+2, r22	; 0x02
    2a2e:	5c 83       	std	Y+4, r21	; 0x04
    2a30:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	6a 81       	ldd	r22, Y+2	; 0x02
    2a36:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	62 97       	sbiw	r28, 0x12	; 18
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	9a 8b       	std	Y+18, r25	; 0x12
    2a66:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a68:	89 89       	ldd	r24, Y+17	; 0x11
    2a6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a6c:	9e 01       	movw	r18, r28
    2a6e:	2f 5f       	subi	r18, 0xFF	; 255
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	b9 01       	movw	r22, r18
    2a74:	4a e0       	ldi	r20, 0x0A	; 10
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <itoa>
   LCD_displayString(buff); /* Display the string */
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_displayString>
}
    2a84:	62 96       	adiw	r28, 0x12	; 18
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_sendCommand>
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <__vector_7>:
/* global pointer to function used for call back */

static volatile void (*g_callBackPtr)(void)=NULL_PTR;


ISR(TIMER1_COMPA_vect){
    2aaa:	1f 92       	push	r1
    2aac:	0f 92       	push	r0
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	0f 92       	push	r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	2f 93       	push	r18
    2ab6:	3f 93       	push	r19
    2ab8:	4f 93       	push	r20
    2aba:	5f 93       	push	r21
    2abc:	6f 93       	push	r22
    2abe:	7f 93       	push	r23
    2ac0:	8f 93       	push	r24
    2ac2:	9f 93       	push	r25
    2ac4:	af 93       	push	r26
    2ac6:	bf 93       	push	r27
    2ac8:	ef 93       	push	r30
    2aca:	ff 93       	push	r31
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    2ad4:	80 91 fd 00 	lds	r24, 0x00FD
    2ad8:	90 91 fe 00 	lds	r25, 0x00FE
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	29 f0       	breq	.+10     	; 0x2aea <__vector_7+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr)();
    2ae0:	e0 91 fd 00 	lds	r30, 0x00FD
    2ae4:	f0 91 fe 00 	lds	r31, 0x00FE
    2ae8:	09 95       	icall
	}

}
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	ff 91       	pop	r31
    2af0:	ef 91       	pop	r30
    2af2:	bf 91       	pop	r27
    2af4:	af 91       	pop	r26
    2af6:	9f 91       	pop	r25
    2af8:	8f 91       	pop	r24
    2afa:	7f 91       	pop	r23
    2afc:	6f 91       	pop	r22
    2afe:	5f 91       	pop	r21
    2b00:	4f 91       	pop	r20
    2b02:	3f 91       	pop	r19
    2b04:	2f 91       	pop	r18
    2b06:	0f 90       	pop	r0
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	0f 90       	pop	r0
    2b0c:	1f 90       	pop	r1
    2b0e:	18 95       	reti

00002b10 <__vector_9>:
ISR(TIMER1_OVF_vect){
    2b10:	1f 92       	push	r1
    2b12:	0f 92       	push	r0
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	0f 92       	push	r0
    2b18:	11 24       	eor	r1, r1
    2b1a:	2f 93       	push	r18
    2b1c:	3f 93       	push	r19
    2b1e:	4f 93       	push	r20
    2b20:	5f 93       	push	r21
    2b22:	6f 93       	push	r22
    2b24:	7f 93       	push	r23
    2b26:	8f 93       	push	r24
    2b28:	9f 93       	push	r25
    2b2a:	af 93       	push	r26
    2b2c:	bf 93       	push	r27
    2b2e:	ef 93       	push	r30
    2b30:	ff 93       	push	r31
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    2b3a:	80 91 fd 00 	lds	r24, 0x00FD
    2b3e:	90 91 fe 00 	lds	r25, 0x00FE
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	29 f0       	breq	.+10     	; 0x2b50 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application  */
			(*g_callBackPtr)();
    2b46:	e0 91 fd 00 	lds	r30, 0x00FD
    2b4a:	f0 91 fe 00 	lds	r31, 0x00FE
    2b4e:	09 95       	icall
		}
}
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	ff 91       	pop	r31
    2b56:	ef 91       	pop	r30
    2b58:	bf 91       	pop	r27
    2b5a:	af 91       	pop	r26
    2b5c:	9f 91       	pop	r25
    2b5e:	8f 91       	pop	r24
    2b60:	7f 91       	pop	r23
    2b62:	6f 91       	pop	r22
    2b64:	5f 91       	pop	r21
    2b66:	4f 91       	pop	r20
    2b68:	3f 91       	pop	r19
    2b6a:	2f 91       	pop	r18
    2b6c:	0f 90       	pop	r0
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	0f 90       	pop	r0
    2b72:	1f 90       	pop	r1
    2b74:	18 95       	reti

00002b76 <Timer1_init>:
/*
 * Function to initialize the Timer driver
 *Inputs: pointer to the configuration structure with type
 *Timer1_ConfigType */

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <Timer1_init+0x6>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=  (Config_Ptr->pin_operation << COM1A0) |  (Config_Ptr->pin_operation << COM1B0) | (1<<FOC1A);
    2b84:	af e4       	ldi	r26, 0x4F	; 79
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8c:	86 81       	ldd	r24, Z+6	; 0x06
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	00 24       	eor	r0, r0
    2b94:	96 95       	lsr	r25
    2b96:	87 95       	ror	r24
    2b98:	07 94       	ror	r0
    2b9a:	96 95       	lsr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	07 94       	ror	r0
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	80 2d       	mov	r24, r0
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    2baa:	86 81       	ldd	r24, Z+6	; 0x06
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	82 95       	swap	r24
    2bb2:	92 95       	swap	r25
    2bb4:	90 7f       	andi	r25, 0xF0	; 240
    2bb6:	98 27       	eor	r25, r24
    2bb8:	80 7f       	andi	r24, 0xF0	; 240
    2bba:	98 27       	eor	r25, r24
    2bbc:	82 2b       	or	r24, r18
    2bbe:	88 60       	ori	r24, 0x08	; 8
    2bc0:	8c 93       	st	X, r24
	TCCR1B = (Config_Ptr->mode << WGM12) | (Config_Ptr->prescaler << CS10);
    2bc2:	ae e4       	ldi	r26, 0x4E	; 78
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	85 81       	ldd	r24, Z+5	; 0x05
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	98 2f       	mov	r25, r24
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	84 81       	ldd	r24, Z+4	; 0x04
    2be4:	89 2b       	or	r24, r25
    2be6:	8c 93       	st	X, r24
	TCNT1= Config_Ptr->initial_value;
    2be8:	ac e4       	ldi	r26, 0x4C	; 76
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e9 81       	ldd	r30, Y+1	; 0x01
    2bee:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	11 96       	adiw	r26, 0x01	; 1
    2bf6:	9c 93       	st	X, r25
    2bf8:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr-> compare_value;
    2bfa:	aa e4       	ldi	r26, 0x4A	; 74
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2c00:	fa 81       	ldd	r31, Y+2	; 0x02
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	11 96       	adiw	r26, 0x01	; 1
    2c08:	9c 93       	st	X, r25
    2c0a:	8e 93       	st	-X, r24
	SREG |= (1<<7);
    2c0c:	af e5       	ldi	r26, 0x5F	; 95
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ef e5       	ldi	r30, 0x5F	; 95
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	80 68       	ori	r24, 0x80	; 128
    2c18:	8c 93       	st	X, r24
	TIMSK |=(1<<OCIE1A);
    2c1a:	a9 e5       	ldi	r26, 0x59	; 89
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e9 e5       	ldi	r30, 0x59	; 89
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	80 61       	ori	r24, 0x10	; 16
    2c26:	8c 93       	st	X, r24
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <Timer1_deInit>:

/* Function to disable the Timer1 */
void Timer1_deInit(void){
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
  TCCR1A=0;
    2c3a:	ef e4       	ldi	r30, 0x4F	; 79
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	10 82       	st	Z, r1
  TCCR1B=0;
    2c40:	ee e4       	ldi	r30, 0x4E	; 78
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	10 82       	st	Z, r1
  TCNT1=0;
    2c46:	ec e4       	ldi	r30, 0x4C	; 76
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	11 82       	std	Z+1, r1	; 0x01
    2c4c:	10 82       	st	Z, r1
  TIMSK=0;
    2c4e:	e9 e5       	ldi	r30, 0x59	; 89
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	10 82       	st	Z, r1

}
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <Timer1_setCallBack>:
/*
 *  Function to set the Call Back function address.
 *Inputs: pointer to Call Back function.
 */

void Timer1_setCallBack(void(*a_ptr)(void)){
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <Timer1_setCallBack+0x6>
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	90 93 fe 00 	sts	0x00FE, r25
    2c70:	80 93 fd 00 	sts	0x00FD, r24


}
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr){
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <UART_init+0x6>
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <UART_init+0x8>
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	9c 83       	std	Y+4, r25	; 0x04
    2c8c:	8b 83       	std	Y+3, r24	; 0x03

	UCSRA =(1<<U2X);
    2c8e:	eb e2       	ldi	r30, 0x2B	; 43
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	80 83       	st	Z, r24
	UCSRB =(1<<RXEN)|(1<<TXEN);
    2c96:	ea e2       	ldi	r30, 0x2A	; 42
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	88 e1       	ldi	r24, 0x18	; 24
    2c9c:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) | (Config_Ptr->bit_data << 1)  | (Config_Ptr->stop_bit << 3)|(Config_Ptr->parity << 4);
    2c9e:	a0 e4       	ldi	r26, 0x40	; 64
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	20 68       	ori	r18, 0x80	; 128
    2cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	28 2b       	or	r18, r24
    2ccc:	eb 81       	ldd	r30, Y+3	; 0x03
    2cce:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd0:	81 81       	ldd	r24, Z+1	; 0x01
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	82 95       	swap	r24
    2cd8:	92 95       	swap	r25
    2cda:	90 7f       	andi	r25, 0xF0	; 240
    2cdc:	98 27       	eor	r25, r24
    2cde:	80 7f       	andi	r24, 0xF0	; 240
    2ce0:	98 27       	eor	r25, r24
    2ce2:	82 2b       	or	r24, r18
    2ce4:	8c 93       	st	X, r24
	uint16 ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cea:	83 81       	ldd	r24, Z+3	; 0x03
    2cec:	94 81       	ldd	r25, Z+4	; 0x04
    2cee:	cc 01       	movw	r24, r24
    2cf0:	a0 e0       	ldi	r26, 0x00	; 0
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	bb 1f       	adc	r27, r27
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	aa 1f       	adc	r26, r26
    2d02:	bb 1f       	adc	r27, r27
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	aa 1f       	adc	r26, r26
    2d0a:	bb 1f       	adc	r27, r27
    2d0c:	9c 01       	movw	r18, r24
    2d0e:	ad 01       	movw	r20, r26
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	92 e1       	ldi	r25, 0x12	; 18
    2d14:	aa e7       	ldi	r26, 0x7A	; 122
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodsi4>
    2d20:	da 01       	movw	r26, r20
    2d22:	c9 01       	movw	r24, r18
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9a 83       	std	Y+2, r25	; 0x02
    2d28:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
    2d2a:	e0 e4       	ldi	r30, 0x40	; 64
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	89 2f       	mov	r24, r25
    2d34:	99 27       	eor	r25, r25
    2d36:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d38:	e9 e2       	ldi	r30, 0x29	; 41
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	80 83       	st	Z, r24
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */

void UART_sendByte(const uint8 data){
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	0f 92       	push	r0
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	89 83       	std	Y+1, r24	; 0x01

while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d5a:	eb e2       	ldi	r30, 0x2B	; 43
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	80 72       	andi	r24, 0x20	; 32
    2d66:	90 70       	andi	r25, 0x00	; 0
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	b9 f3       	breq	.-18     	; 0x2d5a <UART_sendByte+0xc>

	UDR = data;
    2d6c:	ec e2       	ldi	r30, 0x2C	; 44
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	80 83       	st	Z, r24

}
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(){
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d84:	eb e2       	ldi	r30, 0x2B	; 43
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	88 23       	and	r24, r24
    2d8c:	dc f7       	brge	.-10     	; 0x2d84 <UART_recieveByte+0x8>
	    return UDR;
    2d8e:	ec e2       	ldi	r30, 0x2C	; 44
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
}
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <UART_sendString+0x6>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	89 83       	std	Y+1, r24	; 0x01
    2da8:	0a c0       	rjmp	.+20     	; 0x2dbe <UART_sendString+0x24>
	while(*Str != '\0')
		{
			UART_sendByte(*Str);
    2daa:	e9 81       	ldd	r30, Y+1	; 0x01
    2dac:	fa 81       	ldd	r31, Y+2	; 0x02
    2dae:	80 81       	ld	r24, Z
    2db0:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <UART_sendByte>
			Str++;
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
	while(*Str != '\0')
    2dbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc2:	80 81       	ld	r24, Z
    2dc4:	88 23       	and	r24, r24
    2dc6:	89 f7       	brne	.-30     	; 0x2daa <UART_sendString+0x10>
		{
			UART_sendByte(*Str);
			Str++;
		}

}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <UART_receiveString>:
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */

void UART_receiveString(uint8 *Str)
{
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <UART_receiveString+0xa>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9b 83       	std	Y+3, r25	; 0x03
    2de4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2de6:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	9b 81       	ldd	r25, Y+3	; 0x03
    2df2:	8c 01       	movw	r16, r24
    2df4:	02 0f       	add	r16, r18
    2df6:	13 1f       	adc	r17, r19
    2df8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_recieveByte>
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	80 83       	st	Z, r24
    2e00:	0f c0       	rjmp	.+30     	; 0x2e20 <UART_receiveString+0x4e>

	while(Str[i] != '#')
	{
		i++;
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	8c 01       	movw	r16, r24
    2e14:	02 0f       	add	r16, r18
    2e16:	13 1f       	adc	r17, r19
    2e18:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_recieveByte>
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_recieveByte();

	while(Str[i] != '#')
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	e2 0f       	add	r30, r18
    2e2e:	f3 1f       	adc	r31, r19
    2e30:	80 81       	ld	r24, Z
    2e32:	83 32       	cpi	r24, 0x23	; 35
    2e34:	31 f7       	brne	.-52     	; 0x2e02 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	Str[i] = '\0';
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	fc 01       	movw	r30, r24
    2e42:	e2 0f       	add	r30, r18
    2e44:	f3 1f       	adc	r31, r19
    2e46:	10 82       	st	Z, r1
}
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	08 95       	ret

00002e58 <__udivmodsi4>:
    2e58:	a1 e2       	ldi	r26, 0x21	; 33
    2e5a:	1a 2e       	mov	r1, r26
    2e5c:	aa 1b       	sub	r26, r26
    2e5e:	bb 1b       	sub	r27, r27
    2e60:	fd 01       	movw	r30, r26
    2e62:	0d c0       	rjmp	.+26     	; 0x2e7e <__udivmodsi4_ep>

00002e64 <__udivmodsi4_loop>:
    2e64:	aa 1f       	adc	r26, r26
    2e66:	bb 1f       	adc	r27, r27
    2e68:	ee 1f       	adc	r30, r30
    2e6a:	ff 1f       	adc	r31, r31
    2e6c:	a2 17       	cp	r26, r18
    2e6e:	b3 07       	cpc	r27, r19
    2e70:	e4 07       	cpc	r30, r20
    2e72:	f5 07       	cpc	r31, r21
    2e74:	20 f0       	brcs	.+8      	; 0x2e7e <__udivmodsi4_ep>
    2e76:	a2 1b       	sub	r26, r18
    2e78:	b3 0b       	sbc	r27, r19
    2e7a:	e4 0b       	sbc	r30, r20
    2e7c:	f5 0b       	sbc	r31, r21

00002e7e <__udivmodsi4_ep>:
    2e7e:	66 1f       	adc	r22, r22
    2e80:	77 1f       	adc	r23, r23
    2e82:	88 1f       	adc	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	1a 94       	dec	r1
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <__udivmodsi4_loop>
    2e8a:	60 95       	com	r22
    2e8c:	70 95       	com	r23
    2e8e:	80 95       	com	r24
    2e90:	90 95       	com	r25
    2e92:	9b 01       	movw	r18, r22
    2e94:	ac 01       	movw	r20, r24
    2e96:	bd 01       	movw	r22, r26
    2e98:	cf 01       	movw	r24, r30
    2e9a:	08 95       	ret

00002e9c <__prologue_saves__>:
    2e9c:	2f 92       	push	r2
    2e9e:	3f 92       	push	r3
    2ea0:	4f 92       	push	r4
    2ea2:	5f 92       	push	r5
    2ea4:	6f 92       	push	r6
    2ea6:	7f 92       	push	r7
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	ca 1b       	sub	r28, r26
    2ec6:	db 0b       	sbc	r29, r27
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	09 94       	ijmp

00002ed4 <__epilogue_restores__>:
    2ed4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ed6:	39 88       	ldd	r3, Y+17	; 0x11
    2ed8:	48 88       	ldd	r4, Y+16	; 0x10
    2eda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2edc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ede:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ee0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ee2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ee4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ee6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ee8:	c8 84       	ldd	r12, Y+8	; 0x08
    2eea:	df 80       	ldd	r13, Y+7	; 0x07
    2eec:	ee 80       	ldd	r14, Y+6	; 0x06
    2eee:	fd 80       	ldd	r15, Y+5	; 0x05
    2ef0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ef2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ef4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ef6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ef8:	ce 0f       	add	r28, r30
    2efa:	d1 1d       	adc	r29, r1
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	ed 01       	movw	r28, r26
    2f08:	08 95       	ret

00002f0a <itoa>:
    2f0a:	fb 01       	movw	r30, r22
    2f0c:	9f 01       	movw	r18, r30
    2f0e:	e8 94       	clt
    2f10:	42 30       	cpi	r20, 0x02	; 2
    2f12:	c4 f0       	brlt	.+48     	; 0x2f44 <itoa+0x3a>
    2f14:	45 32       	cpi	r20, 0x25	; 37
    2f16:	b4 f4       	brge	.+44     	; 0x2f44 <itoa+0x3a>
    2f18:	4a 30       	cpi	r20, 0x0A	; 10
    2f1a:	29 f4       	brne	.+10     	; 0x2f26 <itoa+0x1c>
    2f1c:	97 fb       	bst	r25, 7
    2f1e:	1e f4       	brtc	.+6      	; 0x2f26 <itoa+0x1c>
    2f20:	90 95       	com	r25
    2f22:	81 95       	neg	r24
    2f24:	9f 4f       	sbci	r25, 0xFF	; 255
    2f26:	64 2f       	mov	r22, r20
    2f28:	77 27       	eor	r23, r23
    2f2a:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__udivmodhi4>
    2f2e:	80 5d       	subi	r24, 0xD0	; 208
    2f30:	8a 33       	cpi	r24, 0x3A	; 58
    2f32:	0c f0       	brlt	.+2      	; 0x2f36 <itoa+0x2c>
    2f34:	89 5d       	subi	r24, 0xD9	; 217
    2f36:	81 93       	st	Z+, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	a1 f7       	brne	.-24     	; 0x2f26 <itoa+0x1c>
    2f3e:	16 f4       	brtc	.+4      	; 0x2f44 <itoa+0x3a>
    2f40:	5d e2       	ldi	r21, 0x2D	; 45
    2f42:	51 93       	st	Z+, r21
    2f44:	10 82       	st	Z, r1
    2f46:	c9 01       	movw	r24, r18
    2f48:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <strrev>

00002f4c <strrev>:
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	fc 01       	movw	r30, r24
    2f50:	67 2f       	mov	r22, r23
    2f52:	71 91       	ld	r23, Z+
    2f54:	77 23       	and	r23, r23
    2f56:	e1 f7       	brne	.-8      	; 0x2f50 <strrev+0x4>
    2f58:	32 97       	sbiw	r30, 0x02	; 2
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <strrev+0x18>
    2f5c:	7c 91       	ld	r23, X
    2f5e:	6d 93       	st	X+, r22
    2f60:	70 83       	st	Z, r23
    2f62:	62 91       	ld	r22, -Z
    2f64:	ae 17       	cp	r26, r30
    2f66:	bf 07       	cpc	r27, r31
    2f68:	c8 f3       	brcs	.-14     	; 0x2f5c <strrev+0x10>
    2f6a:	08 95       	ret

00002f6c <__udivmodhi4>:
    2f6c:	aa 1b       	sub	r26, r26
    2f6e:	bb 1b       	sub	r27, r27
    2f70:	51 e1       	ldi	r21, 0x11	; 17
    2f72:	07 c0       	rjmp	.+14     	; 0x2f82 <__udivmodhi4_ep>

00002f74 <__udivmodhi4_loop>:
    2f74:	aa 1f       	adc	r26, r26
    2f76:	bb 1f       	adc	r27, r27
    2f78:	a6 17       	cp	r26, r22
    2f7a:	b7 07       	cpc	r27, r23
    2f7c:	10 f0       	brcs	.+4      	; 0x2f82 <__udivmodhi4_ep>
    2f7e:	a6 1b       	sub	r26, r22
    2f80:	b7 0b       	sbc	r27, r23

00002f82 <__udivmodhi4_ep>:
    2f82:	88 1f       	adc	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	5a 95       	dec	r21
    2f88:	a9 f7       	brne	.-22     	; 0x2f74 <__udivmodhi4_loop>
    2f8a:	80 95       	com	r24
    2f8c:	90 95       	com	r25
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	08 95       	ret

00002f94 <_exit>:
    2f94:	f8 94       	cli

00002f96 <__stop_program>:
    2f96:	ff cf       	rjmp	.-2      	; 0x2f96 <__stop_program>
